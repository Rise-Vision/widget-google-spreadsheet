var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Visualization={},RiseVision.Common.Visualization=function(){this.query=null,this.isVisualizationLoaded=!1},RiseVision.Common.Visualization.prototype.getData=function(t){this.url=t.url,this.refreshInterval=t.refreshInterval,this.timeout=t.timeout||30,this.callback=t.callback,this.params=t.params,t.queryString&&(this.queryString=t.queryString),this.isVisualizationLoaded?this.sendQuery():this.loadVisualizationAPI()},RiseVision.Common.Visualization.prototype.loadVisualizationAPI=function(){var t=this;google.load("visualization","1",{callback:function(){t.isVisualizationLoaded=!0,t.sendQuery()}})},RiseVision.Common.Visualization.prototype.sendQuery=function(){var t=this;null!==this.query&&this.query.abort(),this.query=new google.visualization.Query(this.url),this.query.setRefreshInterval(this.refreshInterval),this.query.setTimeout(this.timeout),this.queryString&&this.query.setQuery(this.queryString),this.query.send(function(e){t.onQueryExecuted(e)})},RiseVision.Common.Visualization.prototype.onQueryExecuted=function(t){null===t?this.callback(t,this.params):t.isError()?(console.log("Message: "+t.getMessage()),console.log("Detailed message: "+t.getDetailedMessage()),console.log("Reasons: "+t.getReasons()),this.callback(null,this.params)):this.callback(t.getDataTable(),this.params)};var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Validation=function(){"use strict";function t(t,e){var n=t.value.trim();return s.test(n)?parseFloat(n)>parseFloat(e):!1}function e(t,e){var n=t.value.trim();return s.test(n)?parseFloat(n)<parseFloat(e):!1}function n(t){var e=t.value.trim();return i.test(e)}function a(t){var e=t.value.trim(),n=!1;return"checkbox"===t.type||"radio"===t.type?t.checked===!0&&(n=!0):null!==e&&""!==e&&(n=!0),n}function r(t){var e=t.value.trim();return-1===e.indexOf("://")&&(e="http://"+e),o.test(e)}var o=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,i=/^(\-|\+)?([0-9]+|Infinity)$/,s=/^\-?[0-9]*\.?[0-9]+$/;return{isGreaterThan:t,isLessThan:e,isValidRequired:a,isValidURL:r,isValidNumber:n}}(),RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",a="color: "+e.color+"; ",r="font-size: "+e.size+"px; ",o="font-weight: "+(e.bold?"bold":"normal")+"; ",i="font-style: "+(e.italic?"italic":"normal")+"; ",s="text-decoration: "+(e.underline?"underline":"none")+"; ",l="background-color: "+e.highlightColor+"; ";return"."+t+" {"+n+a+r+o+i+s+l+"}"}function e(t){for(var e=document.createElement("style"),n=0,a=t.length;a>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,o){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?a(n.fontSetting.font.family,n.fontSetting.font.url,o):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&r(n.fontSetting.font.family,o))})}function a(t,e,n){var a=null,r="font-family: "+t+"; src: url('"+e+"');";n=n||document,a=n.styleSheets[0],null!==a&&a.addRule("@font-face",r)}function r(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}return{getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:a,loadGoogleFont:r}}(),function(t,e,n){!function(t){"use strict";"function"==typeof define&&define.amd?define("datatables",["jquery"],t):"object"==typeof exports?t(require("jquery")):jQuery&&!jQuery.fn.dataTable&&t(jQuery)}(function(a){"use strict";function r(t){var e,n,o="a aa ai ao as b fn i m o s ",i={};a.each(t,function(a){e=a.match(/^([^A-Z]+?)([A-Z])/),e&&-1!==o.indexOf(e[1]+" ")&&(n=a.replace(e[0],e[2].toLowerCase()),i[n]=a,"o"===e[1]&&r(t[a]))}),t._hungarianMap=i}function o(t,e,i){t._hungarianMap||r(t);var s;a.each(e,function(r){s=t._hungarianMap[r],s===n||!i&&e[s]!==n||("o"===s.charAt(0)?(e[s]||(e[s]={}),a.extend(!0,e[s],e[r]),o(t[s],e[s],i)):e[s]=e[r])})}function i(t){var e=Xe.defaults.oLanguage,n=t.sZeroRecords;!t.sEmptyTable&&n&&"No data available in table"===e.sEmptyTable&&He(t,t,"sZeroRecords","sEmptyTable"),!t.sLoadingRecords&&n&&"Loading..."===e.sLoadingRecords&&He(t,t,"sZeroRecords","sLoadingRecords"),t.sInfoThousands&&(t.sThousands=t.sInfoThousands);var a=t.sDecimal;a&&qe(a)}function s(t){vn(t,"ordering","bSort"),vn(t,"orderMulti","bSortMulti"),vn(t,"orderClasses","bSortClasses"),vn(t,"orderCellsTop","bSortCellsTop"),vn(t,"order","aaSorting"),vn(t,"orderFixed","aaSortingFixed"),vn(t,"paging","bPaginate"),vn(t,"pagingType","sPaginationType"),vn(t,"pageLength","iDisplayLength"),vn(t,"searching","bFilter");var e=t.aoSearchCols;if(e)for(var n=0,a=e.length;a>n;n++)e[n]&&o(Xe.models.oSearch,e[n])}function l(t){vn(t,"orderable","bSortable"),vn(t,"orderData","aDataSort"),vn(t,"orderSequence","asSorting"),vn(t,"orderDataType","sortDataType")}function u(t){var e=t.oBrowser,n=a("<div/>").css({position:"absolute",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(a("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(a('<div class="test"/>').css({width:"100%",height:10}))).appendTo("body"),r=n.find(".test");e.bScrollOversize=100===r[0].offsetWidth,e.bScrollbarLeft=1!==r.offset().left,n.remove()}function c(t,e,a,r,o,i){var s,l=r,u=!1;for(a!==n&&(s=a,u=!0);l!==o;)t.hasOwnProperty(l)&&(s=u?e(s,t[l],l,t):t[l],u=!0,l+=i);return s}function f(t,n){var r=Xe.defaults.column,o=t.aoColumns.length,i=a.extend({},Xe.models.oColumn,r,{nTh:n?n:e.createElement("th"),sTitle:r.sTitle?r.sTitle:n?n.innerHTML:"",aDataSort:r.aDataSort?r.aDataSort:[o],mData:r.mData?r.mData:o,idx:o});t.aoColumns.push(i);var s=t.aoPreSearchCols;s[o]=a.extend({},Xe.models.oSearch,s[o]),d(t,o,null)}function d(t,e,r){var i=t.aoColumns[e],s=t.oClasses,u=a(i.nTh);if(!i.sWidthOrig){i.sWidthOrig=u.attr("width")||null;var c=(u.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);c&&(i.sWidthOrig=c[1])}r!==n&&null!==r&&(l(r),o(Xe.defaults.column,r),r.mDataProp===n||r.mData||(r.mData=r.mDataProp),r.sType&&(i._sManualType=r.sType),r.className&&!r.sClass&&(r.sClass=r.className),a.extend(i,r),He(i,r,"sWidth","sWidthOrig"),"number"==typeof r.iDataSort&&(i.aDataSort=[r.iDataSort]),He(i,r,"aDataSort"));var f=i.mData,d=I(f),h=i.mRender?I(i.mRender):null,p=function(t){return"string"==typeof t&&-1!==t.indexOf("@")};i._bAttrSrc=a.isPlainObject(f)&&(p(f.sort)||p(f.type)||p(f.filter)),i.fnGetData=function(t,e,a){var r=d(t,e,n,a);return h&&e?h(r,e,t,a):r},i.fnSetData=function(t,e,n){return R(f)(t,e,n)},t.oFeatures.bSort||(i.bSortable=!1,u.addClass(s.sSortableNone));var g=-1!==a.inArray("asc",i.asSorting),b=-1!==a.inArray("desc",i.asSorting);i.bSortable&&(g||b)?g&&!b?(i.sSortingClass=s.sSortableAsc,i.sSortingClassJUI=s.sSortJUIAscAllowed):!g&&b?(i.sSortingClass=s.sSortableDesc,i.sSortingClassJUI=s.sSortJUIDescAllowed):(i.sSortingClass=s.sSortable,i.sSortingClassJUI=s.sSortJUI):(i.sSortingClass=s.sSortableNone,i.sSortingClassJUI="")}function h(t){if(t.oFeatures.bAutoWidth!==!1){var e=t.aoColumns;ve(t);for(var n=0,a=e.length;a>n;n++)e[n].nTh.style.width=e[n].sWidth}var r=t.oScroll;(""!==r.sY||""!==r.sX)&&be(t),Me(t,null,"column-sizing",[t])}function p(t,e){var n=m(t,"bVisible");return"number"==typeof n[e]?n[e]:null}function g(t,e){var n=m(t,"bVisible"),r=a.inArray(e,n);return-1!==r?r:null}function b(t){return m(t,"bVisible").length}function m(t,e){var n=[];return a.map(t.aoColumns,function(t,a){t[e]&&n.push(a)}),n}function v(t){var e,a,r,o,i,s,l,u,c,f=t.aoColumns,d=t.aoData,h=Xe.ext.type.detect;for(e=0,a=f.length;a>e;e++)if(l=f[e],c=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(r=0,o=h.length;o>r;r++){for(i=0,s=d.length;s>i&&(c[i]===n&&(c[i]=w(t,i,e,"type")),u=h[r](c[i],t),u&&"html"!==u);i++);if(u){l.sType=u;break}}l.sType||(l.sType="string")}}function S(t,e,r,o){var i,s,l,u,c,d,h,p=t.aoColumns;if(e)for(i=e.length-1;i>=0;i--){h=e[i];var g=h.targets!==n?h.targets:h.aTargets;for(a.isArray(g)||(g=[g]),l=0,u=g.length;u>l;l++)if("number"==typeof g[l]&&g[l]>=0){for(;p.length<=g[l];)f(t);o(g[l],h)}else if("number"==typeof g[l]&&g[l]<0)o(p.length+g[l],h);else if("string"==typeof g[l])for(c=0,d=p.length;d>c;c++)("_all"==g[l]||a(p[c].nTh).hasClass(g[l]))&&o(c,h)}if(r)for(i=0,s=r.length;s>i;i++)o(i,r[i])}function y(t,e,n,r){var o=t.aoData.length,i=a.extend(!0,{},Xe.models.oRow,{src:n?"dom":"data"});i._aData=e,t.aoData.push(i);for(var s=t.aoColumns,l=0,u=s.length;u>l;l++)n&&T(t,o,l,w(t,o,l)),s[l].sType=null;return t.aiDisplayMaster.push(o),(n||!t.oFeatures.bDeferRender)&&j(t,o,n,r),o}function D(t,e){var n;return e instanceof a||(e=a(e)),e.map(function(e,a){return n=N(t,a),y(t,n.data,a,n.cells)})}function C(t,e){return e._DT_RowIndex!==n?e._DT_RowIndex:null}function _(t,e,n){return a.inArray(n,t.aoData[e].anCells)}function w(t,e,a,r){var o=t.iDraw,i=t.aoColumns[a],s=t.aoData[e]._aData,l=i.sDefaultContent,u=i.fnGetData(s,r,{settings:t,row:e,col:a});if(u===n)return t.iDrawError!=o&&null===l&&(ke(t,0,"Requested unknown parameter "+("function"==typeof i.mData?"{function}":"'"+i.mData+"'")+" for row "+e,4),t.iDrawError=o),l;if(u!==s&&null!==u||null===l){if("function"==typeof u)return u.call(s)}else u=l;return null===u&&"display"==r?"":u}function T(t,e,n,a){var r=t.aoColumns[n],o=t.aoData[e]._aData;r.fnSetData(o,a,{settings:t,row:e,col:n})}function x(t){return a.map(t.match(/(\\.|[^\.])+/g),function(t){return t.replace(/\\./g,".")})}function I(t){if(a.isPlainObject(t)){var e={};return a.each(t,function(t,n){n&&(e[t]=I(n))}),function(t,a,r,o){var i=e[a]||e._;return i!==n?i(t,a,r,o):t}}if(null===t)return function(t){return t};if("function"==typeof t)return function(e,n,a,r){return t(e,n,a,r)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e){return e[t]};var r=function(t,e,a){var o,i,s,l;if(""!==a)for(var u=x(a),c=0,f=u.length;f>c;c++){if(o=u[c].match(Sn),i=u[c].match(yn),o){u[c]=u[c].replace(Sn,""),""!==u[c]&&(t=t[u[c]]),s=[],u.splice(0,c+1),l=u.join(".");for(var d=0,h=t.length;h>d;d++)s.push(r(t[d],e,l));var p=o[0].substring(1,o[0].length-1);t=""===p?s:s.join(p);break}if(i)u[c]=u[c].replace(yn,""),t=t[u[c]]();else{if(null===t||t[u[c]]===n)return n;t=t[u[c]]}}return t};return function(e,n){return r(e,n,t)}}function R(t){if(a.isPlainObject(t))return R(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,n,a){t(e,"set",n,a)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e,n){e[t]=n};var e=function(t,a,r){for(var o,i,s,l,u,c=x(r),f=c[c.length-1],d=0,h=c.length-1;h>d;d++){if(i=c[d].match(Sn),s=c[d].match(yn),i){c[d]=c[d].replace(Sn,""),t[c[d]]=[],o=c.slice(),o.splice(0,d+1),u=o.join(".");for(var p=0,g=a.length;g>p;p++)l={},e(l,a[p],u),t[c[d]].push(l);return}s&&(c[d]=c[d].replace(yn,""),t=t[c[d]](a)),(null===t[c[d]]||t[c[d]]===n)&&(t[c[d]]={}),t=t[c[d]]}f.match(yn)?t=t[f.replace(yn,"")](a):t[f.replace(Sn,"")]=a};return function(n,a){return e(n,a,t)}}function A(t){return hn(t.aoData,"_aData")}function F(t){t.aoData.length=0,t.aiDisplayMaster.length=0,t.aiDisplay.length=0}function L(t,e,a){for(var r=-1,o=0,i=t.length;i>o;o++)t[o]==e?r=o:t[o]>e&&t[o]--;-1!=r&&a===n&&t.splice(r,1)}function P(t,e,a,r){var o,i,s=t.aoData[e];if("dom"!==a&&(a&&"auto"!==a||"dom"!==s.src)){var l,u=s.anCells;if(u)for(o=0,i=u.length;i>o;o++){for(l=u[o];l.childNodes.length;)l.removeChild(l.firstChild);u[o].innerHTML=w(t,e,o,"display")}}else s._aData=N(t,s).data;s._aSortData=null,s._aFilterData=null;var c=t.aoColumns;if(r!==n)c[r].sType=null;else for(o=0,i=c.length;i>o;o++)c[o].sType=null;O(s)}function N(t,e){var n,r,o,i,s=[],l=[],u=e.firstChild,c=0,f=t.aoColumns,d=function(t,e,n){if("string"==typeof t){var a=t.indexOf("@");if(-1!==a){var r=t.substring(a+1);o["@"+r]=n.getAttribute(r)}}},h=function(t){r=f[c],i=a.trim(t.innerHTML),r&&r._bAttrSrc?(o={display:i},d(r.mData.sort,o,t),d(r.mData.type,o,t),d(r.mData.filter,o,t),s.push(o)):s.push(i),c++};if(u)for(;u;)n=u.nodeName.toUpperCase(),("TD"==n||"TH"==n)&&(h(u),l.push(u)),u=u.nextSibling;else{l=e.anCells;for(var p=0,g=l.length;g>p;p++)h(l[p])}return{data:s,cells:l}}function j(t,n,a,r){var o,i,s,l,u,c=t.aoData[n],f=c._aData,d=[];if(null===c.nTr){for(o=a||e.createElement("tr"),c.nTr=o,c.anCells=d,o._DT_RowIndex=n,O(c),l=0,u=t.aoColumns.length;u>l;l++)s=t.aoColumns[l],i=a?r[l]:e.createElement(s.sCellType),d.push(i),(!a||s.mRender||s.mData!==l)&&(i.innerHTML=w(t,n,l,"display")),s.sClass&&(i.className+=" "+s.sClass),s.bVisible&&!a?o.appendChild(i):!s.bVisible&&a&&i.parentNode.removeChild(i),s.fnCreatedCell&&s.fnCreatedCell.call(t.oInstance,i,w(t,n,l),f,n,l);Me(t,"aoRowCreatedCallback",null,[o,f,n])}c.nTr.setAttribute("role","row")}function O(t){var e=t.nTr,n=t._aData;if(e){if(n.DT_RowId&&(e.id=n.DT_RowId),n.DT_RowClass){var r=n.DT_RowClass.split(" ");t.__rowc=t.__rowc?mn(t.__rowc.concat(r)):r,a(e).removeClass(t.__rowc.join(" ")).addClass(n.DT_RowClass)}n.DT_RowData&&a(e).data(n.DT_RowData)}}function k(t){var e,n,r,o,i,s=t.nTHead,l=t.nTFoot,u=0===a("th, td",s).length,c=t.oClasses,f=t.aoColumns;for(u&&(o=a("<tr/>").appendTo(s)),e=0,n=f.length;n>e;e++)i=f[e],r=a(i.nTh).addClass(i.sClass),u&&r.appendTo(o),t.oFeatures.bSort&&(r.addClass(i.sSortingClass),i.bSortable!==!1&&(r.attr("tabindex",t.iTabIndex).attr("aria-controls",t.sTableId),Fe(t,i.nTh,e))),i.sTitle!=r.html()&&r.html(i.sTitle),$e(t,"header")(t,r,i,c);if(u&&M(t.aoHeader,s),a(s).find(">tr").attr("role","row"),a(s).find(">tr>th, >tr>td").addClass(c.sHeaderTH),a(l).find(">tr>th, >tr>td").addClass(c.sFooterTH),null!==l){var d=t.aoFooter[0];for(e=0,n=d.length;n>e;e++)i=f[e],i.nTf=d[e].cell,i.sClass&&a(i.nTf).addClass(i.sClass)}}function H(t,e,r){var o,i,s,l,u,c,f,d,h,p=[],g=[],b=t.aoColumns.length;if(e){for(r===n&&(r=!1),o=0,i=e.length;i>o;o++){for(p[o]=e[o].slice(),p[o].nTr=e[o].nTr,s=b-1;s>=0;s--)t.aoColumns[s].bVisible||r||p[o].splice(s,1);g.push([])}for(o=0,i=p.length;i>o;o++){if(f=p[o].nTr)for(;c=f.firstChild;)f.removeChild(c);for(s=0,l=p[o].length;l>s;s++)if(d=1,h=1,g[o][s]===n){for(f.appendChild(p[o][s].cell),g[o][s]=1;p[o+d]!==n&&p[o][s].cell==p[o+d][s].cell;)g[o+d][s]=1,d++;for(;p[o][s+h]!==n&&p[o][s].cell==p[o][s+h].cell;){for(u=0;d>u;u++)g[o+u][s+h]=1;h++}a(p[o][s].cell).attr("rowspan",d).attr("colspan",h)}}}}function V(t){var e=Me(t,"aoPreDrawCallback","preDraw",[t]);if(-1!==a.inArray(!1,e))return pe(t,!1),void 0;var r=[],o=0,i=t.asStripeClasses,s=i.length,l=(t.aoOpenRows.length,t.oLanguage),u=t.iInitDisplayStart,c="ssp"==Be(t),f=t.aiDisplay;t.bDrawing=!0,u!==n&&-1!==u&&(t._iDisplayStart=c?u:u>=t.fnRecordsDisplay()?0:u,t.iInitDisplayStart=-1);var d=t._iDisplayStart,h=t.fnDisplayEnd();if(t.bDeferLoading)t.bDeferLoading=!1,t.iDraw++,pe(t,!1);else if(c){if(!t.bDestroying&&!B(t))return}else t.iDraw++;if(0!==f.length)for(var p=c?0:d,g=c?t.aoData.length:h,m=p;g>m;m++){var v=f[m],S=t.aoData[v];null===S.nTr&&j(t,v);var y=S.nTr;if(0!==s){var D=i[o%s];S._sRowStripe!=D&&(a(y).removeClass(S._sRowStripe).addClass(D),S._sRowStripe=D)}Me(t,"aoRowCallback",null,[y,S._aData,o,m]),r.push(y),o++}else{var C=l.sZeroRecords;1==t.iDraw&&"ajax"==Be(t)?C=l.sLoadingRecords:l.sEmptyTable&&0===t.fnRecordsTotal()&&(C=l.sEmptyTable),r[0]=a("<tr/>",{"class":s?i[0]:""}).append(a("<td />",{valign:"top",colSpan:b(t),"class":t.oClasses.sRowEmpty}).html(C))[0]}Me(t,"aoHeaderCallback","header",[a(t.nTHead).children("tr")[0],A(t),d,h,f]),Me(t,"aoFooterCallback","footer",[a(t.nTFoot).children("tr")[0],A(t),d,h,f]);var _=a(t.nTBody);_.children().detach(),_.append(a(r)),Me(t,"aoDrawCallback","draw",[t]),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}function U(t,e){var n=t.oFeatures,a=n.bSort,r=n.bFilter;a&&Ie(t),r?G(t,t.oPreviousSearch):t.aiDisplay=t.aiDisplayMaster.slice(),e!==!0&&(t._iDisplayStart=0),t._drawHold=e,V(t),t._drawHold=!1}function W(t){var e=t.oClasses,n=a(t.nTable),r=a("<div/>").insertBefore(n),o=t.oFeatures,i=a("<div/>",{id:t.sTableId+"_wrapper","class":e.sWrapper+(t.nTFoot?"":" "+e.sNoFooter)});t.nHolding=r[0],t.nTableWrapper=i[0],t.nTableReinsertBefore=t.nTable.nextSibling;for(var s,l,u,c,f,d,h=t.sDom.split(""),p=0;p<h.length;p++){if(s=null,l=h[p],"<"==l){if(u=a("<div/>")[0],c=h[p+1],"'"==c||'"'==c){for(f="",d=2;h[p+d]!=c;)f+=h[p+d],d++;if("H"==f?f=e.sJUIHeader:"F"==f&&(f=e.sJUIFooter),-1!=f.indexOf(".")){var g=f.split(".");u.id=g[0].substr(1,g[0].length-1),u.className=g[1]}else"#"==f.charAt(0)?u.id=f.substr(1,f.length-1):u.className=f;p+=d}i.append(u),i=a(u)}else if(">"==l)i=i.parent();else if("l"==l&&o.bPaginate&&o.bLengthChange)s=ce(t);else if("f"==l&&o.bFilter)s=X(t);else if("r"==l&&o.bProcessing)s=he(t);else if("t"==l)s=ge(t);else if("i"==l&&o.bInfo)s=re(t);else if("p"==l&&o.bPaginate)s=fe(t);else if(0!==Xe.ext.feature.length)for(var b=Xe.ext.feature,m=0,v=b.length;v>m;m++)if(l==b[m].cFeature){s=b[m].fnInit(t);break}if(s){var S=t.aanFeatures;S[l]||(S[l]=[]),S[l].push(s),i.append(s)}}r.replaceWith(i)}function M(t,e){var n,r,o,i,s,l,u,c,f,d,h,p=a(e).children("tr"),g=function(t,e,n){for(var a=t[e];a[n];)n++;return n};for(t.splice(0,t.length),o=0,l=p.length;l>o;o++)t.push([]);for(o=0,l=p.length;l>o;o++)for(n=p[o],c=0,r=n.firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(f=1*r.getAttribute("colspan"),d=1*r.getAttribute("rowspan"),f=f&&0!==f&&1!==f?f:1,d=d&&0!==d&&1!==d?d:1,u=g(t,o,c),h=1===f?!0:!1,s=0;f>s;s++)for(i=0;d>i;i++)t[o+i][u+s]={cell:r,unique:h},t[o+i].nTr=n;r=r.nextSibling}}function E(t,e,n){var a=[];n||(n=t.aoHeader,e&&(n=[],M(n,e)));for(var r=0,o=n.length;o>r;r++)for(var i=0,s=n[r].length;s>i;i++)!n[r][i].unique||a[i]&&t.bSortCellsTop||(a[i]=n[r][i].cell);return a}function $(t,e,n){if(Me(t,"aoServerParams","serverParams",[e]),e&&a.isArray(e)){var r={},o=/(.*?)\[\]$/;a.each(e,function(t,e){var n=e.name.match(o);if(n){var a=n[0];r[a]||(r[a]=[]),r[a].push(e.value)}else r[e.name]=e.value}),e=r}var i,s=t.ajax,l=t.oInstance;if(a.isPlainObject(s)&&s.data){i=s.data;var u=a.isFunction(i)?i(e):i;e=a.isFunction(i)&&u?u:a.extend(!0,e,u),delete s.data}var c={data:e,success:function(e){var a=e.error||e.sError;a&&t.oApi._fnLog(t,0,a),t.json=e,Me(t,null,"xhr",[t,e]),n(e)},dataType:"json",cache:!1,type:t.sServerMethod,error:function(e,n){var a=t.oApi._fnLog;"parsererror"==n?a(t,0,"Invalid JSON response",1):4===e.readyState&&a(t,0,"Ajax error",7),pe(t,!1)}};t.oAjaxData=e,Me(t,null,"preXhr",[t,e]),t.fnServerData?t.fnServerData.call(l,t.sAjaxSource,a.map(e,function(t,e){return{name:e,value:t}}),n,t):t.sAjaxSource||"string"==typeof s?t.jqXHR=a.ajax(a.extend(c,{url:s||t.sAjaxSource})):a.isFunction(s)?t.jqXHR=s.call(l,e,n,t):(t.jqXHR=a.ajax(a.extend(c,s)),s.data=i)}function B(t){return t.bAjaxDataGet?(t.iDraw++,pe(t,!0),$(t,J(t),function(e){q(t,e)}),!1):!0}function J(t){var e,n,r,o,i=t.aoColumns,s=i.length,l=t.oFeatures,u=t.oPreviousSearch,c=t.aoPreSearchCols,f=[],d=xe(t),h=t._iDisplayStart,p=l.bPaginate!==!1?t._iDisplayLength:-1,g=function(t,e){f.push({name:t,value:e})};g("sEcho",t.iDraw),g("iColumns",s),g("sColumns",hn(i,"sName").join(",")),g("iDisplayStart",h),g("iDisplayLength",p);var b={draw:t.iDraw,columns:[],order:[],start:h,length:p,search:{value:u.sSearch,regex:u.bRegex}};for(e=0;s>e;e++)r=i[e],o=c[e],n="function"==typeof r.mData?"function":r.mData,b.columns.push({data:n,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:o.sSearch,regex:o.bRegex}}),g("mDataProp_"+e,n),l.bFilter&&(g("sSearch_"+e,o.sSearch),g("bRegex_"+e,o.bRegex),g("bSearchable_"+e,r.bSearchable)),l.bSort&&g("bSortable_"+e,r.bSortable);l.bFilter&&(g("sSearch",u.sSearch),g("bRegex",u.bRegex)),l.bSort&&(a.each(d,function(t,e){b.order.push({column:e.col,dir:e.dir}),g("iSortCol_"+t,e.col),g("sSortDir_"+t,e.dir)}),g("iSortingCols",d.length));var m=Xe.ext.legacy.ajax;return null===m?t.sAjaxSource?f:b:m?f:b}function q(t,e){var a=function(t,a){return e[t]!==n?e[t]:e[a]},r=a("sEcho","draw"),o=a("iTotalRecords","recordsTotal"),i=a("iTotalDisplayRecords","recordsFiltered");if(r){if(1*r<t.iDraw)return;t.iDraw=1*r}F(t),t._iRecordsTotal=parseInt(o,10),t._iRecordsDisplay=parseInt(i,10);for(var s=z(t,e),l=0,u=s.length;u>l;l++)y(t,s[l]);t.aiDisplay=t.aiDisplayMaster.slice(),t.bAjaxDataGet=!1,V(t),t._bInitComplete||le(t,e),t.bAjaxDataGet=!0,pe(t,!1)}function z(t,e){var r=a.isPlainObject(t.ajax)&&t.ajax.dataSrc!==n?t.ajax.dataSrc:t.sAjaxDataProp;return"data"===r?e.aaData||e[r]:""!==r?I(r)(e):e}function X(t){var n=t.oClasses,r=t.sTableId,o=t.oLanguage,i=t.oPreviousSearch,s=t.aanFeatures,l='<input type="search" class="'+n.sFilterInput+'"/>',u=o.sSearch;u=u.match(/_INPUT_/)?u.replace("_INPUT_",l):u+l;var c=a("<div/>",{id:s.f?null:r+"_filter","class":n.sFilter}).append(a("<label/>").append(u)),f=function(){var e=(s.f,this.value?this.value:"");e!=i.sSearch&&(G(t,{sSearch:e,bRegex:i.bRegex,bSmart:i.bSmart,bCaseInsensitive:i.bCaseInsensitive}),t._iDisplayStart=0,V(t))},d=a("input",c).val(i.sSearch).attr("placeholder",o.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT","ssp"===Be(t)?Se(f,400):f).bind("keypress.DT",function(t){return 13==t.keyCode?!1:void 0}).attr("aria-controls",r);return a(t.nTable).on("search.dt.DT",function(n,a){if(t===a)try{d[0]!==e.activeElement&&d.val(i.sSearch)}catch(r){}}),c[0]}function G(t,e,a){var r=t.oPreviousSearch,o=t.aoPreSearchCols,i=function(t){r.sSearch=t.sSearch,r.bRegex=t.bRegex,r.bSmart=t.bSmart,r.bCaseInsensitive=t.bCaseInsensitive},s=function(t){return t.bEscapeRegex!==n?!t.bEscapeRegex:t.bRegex};if(v(t),"ssp"!=Be(t)){Z(t,e.sSearch,a,s(e),e.bSmart,e.bCaseInsensitive),i(e);for(var l=0;l<o.length;l++)Y(t,o[l].sSearch,l,s(o[l]),o[l].bSmart,o[l].bCaseInsensitive);Q(t)}else i(e);t.bFiltered=!0,Me(t,null,"search",[t])}function Q(t){for(var e,n,a=Xe.ext.search,r=t.aiDisplay,o=0,i=a.length;i>o;o++){for(var s=[],l=0,u=r.length;u>l;l++)n=r[l],e=t.aoData[n],a[o](t,e._aFilterData,n,e._aData,l)&&s.push(n);r.length=0,r.push.apply(r,s)}}function Y(t,e,n,a,r,o){if(""!==e)for(var i,s=t.aiDisplay,l=K(e,a,r,o),u=s.length-1;u>=0;u--)i=t.aoData[s[u]]._aFilterData[n],l.test(i)||s.splice(u,1)}function Z(t,e,n,a,r,o){var i,s,l,u=K(e,a,r,o),c=t.oPreviousSearch.sSearch,f=t.aiDisplayMaster;if(0!==Xe.ext.search.length&&(n=!0),s=ee(t),e.length<=0)t.aiDisplay=f.slice();else for((s||n||c.length>e.length||0!==e.indexOf(c)||t.bSorted)&&(t.aiDisplay=f.slice()),i=t.aiDisplay,l=i.length-1;l>=0;l--)u.test(t.aoData[i[l]]._sFilterRow)||i.splice(l,1)}function K(t,e,n,r){if(t=e?t:te(t),n){var o=a.map(t.match(/"[^"]+"|[^ ]+/g)||"",function(t){return'"'===t.charAt(0)?t.match(/^"(.*)"$/)[1]:t});t="^(?=.*?"+o.join(")(?=.*?")+").*$"}return new RegExp(t,r?"i":"")}function te(t){return t.replace(rn,"\\$1")}function ee(t){var e,n,a,r,o,i,s,l,u=t.aoColumns,c=Xe.ext.type.search,f=!1;for(n=0,r=t.aoData.length;r>n;n++)if(l=t.aoData[n],!l._aFilterData){for(i=[],a=0,o=u.length;o>a;a++)e=u[a],e.bSearchable?(s=w(t,n,a,"filter"),c[e.sType]&&(s=c[e.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(Dn.innerHTML=s,s=Cn?Dn.textContent:Dn.innerText),s.replace&&(s=s.replace(/[\r\n]/g,"")),i.push(s);l._aFilterData=i,l._sFilterRow=i.join("  "),f=!0}return f}function ne(t){return{search:t.sSearch,smart:t.bSmart,regex:t.bRegex,caseInsensitive:t.bCaseInsensitive}}function ae(t){return{sSearch:t.search,bSmart:t.smart,bRegex:t.regex,bCaseInsensitive:t.caseInsensitive}}function re(t){var e=t.sTableId,n=t.aanFeatures.i,r=a("<div/>",{"class":t.oClasses.sInfo,id:n?null:e+"_info"});return n||(t.aoDrawCallback.push({fn:oe,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),a(t.nTable).attr("aria-describedby",e+"_info")),r[0]}function oe(t){var e=t.aanFeatures.i;if(0!==e.length){var n=t.oLanguage,r=t._iDisplayStart+1,o=t.fnDisplayEnd(),i=t.fnRecordsTotal(),s=t.fnRecordsDisplay(),l=s?n.sInfo:n.sInfoEmpty;s!==i&&(l+=" "+n.sInfoFiltered),l+=n.sInfoPostFix,l=ie(t,l);var u=n.fnInfoCallback;null!==u&&(l=u.call(t.oInstance,t,r,o,i,s,l)),a(e).html(l)}}function ie(t,e){var n=t.fnFormatNumber,a=t._iDisplayStart+1,r=t._iDisplayLength,o=t.fnRecordsDisplay(),i=-1===r;return e.replace(/_START_/g,n.call(t,a)).replace(/_END_/g,n.call(t,t.fnDisplayEnd())).replace(/_MAX_/g,n.call(t,t.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(t,o)).replace(/_PAGE_/g,n.call(t,i?1:Math.ceil(a/r))).replace(/_PAGES_/g,n.call(t,i?1:Math.ceil(o/r)))}function se(t){var e,n,a,r=t.iInitDisplayStart,o=t.aoColumns,i=t.oFeatures;if(!t.bInitialised)return setTimeout(function(){se(t)},200),void 0;for(W(t),k(t),H(t,t.aoHeader),H(t,t.aoFooter),pe(t,!0),i.bAutoWidth&&ve(t),e=0,n=o.length;n>e;e++)a=o[e],a.sWidth&&(a.nTh.style.width=we(a.sWidth));U(t);var s=Be(t);"ssp"!=s&&("ajax"==s?$(t,[],function(n){var a=z(t,n);for(e=0;e<a.length;e++)y(t,a[e]);t.iInitDisplayStart=r,U(t),pe(t,!1),le(t,n)},t):(pe(t,!1),le(t)))}function le(t,e){t._bInitComplete=!0,e&&h(t),Me(t,"aoInitComplete","init",[t,e])}function ue(t,e){var n=parseInt(e,10);t._iDisplayLength=n,Ee(t),Me(t,null,"length",[t,n])}function ce(t){for(var e=t.oClasses,n=t.sTableId,r=t.aLengthMenu,o=a.isArray(r[0]),i=o?r[0]:r,s=o?r[1]:r,l=a("<select/>",{name:n+"_length","aria-controls":n,"class":e.sLengthSelect}),u=0,c=i.length;c>u;u++)l[0][u]=new Option(s[u],i[u]);var f=a("<div><label/></div>").addClass(e.sLength);return t.aanFeatures.l||(f[0].id=n+"_length"),f.children().append(t.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),a("select",f).val(t._iDisplayLength).bind("change.DT",function(){ue(t,a(this).val()),V(t)}),a(t.nTable).bind("length.dt.DT",function(e,n,r){t===n&&a("select",f).val(r)}),f[0]}function fe(t){var e=t.sPaginationType,n=Xe.ext.pager[e],r="function"==typeof n,o=function(t){V(t)},i=a("<div/>").addClass(t.oClasses.sPaging+e)[0],s=t.aanFeatures;return r||n.fnInit(t,i,o),s.p||(i.id=t.sTableId+"_paginate",t.aoDrawCallback.push({fn:function(t){if(r){var e,a,i=t._iDisplayStart,l=t._iDisplayLength,u=t.fnRecordsDisplay(),c=-1===l,f=c?0:Math.ceil(i/l),d=c?1:Math.ceil(u/l),h=n(f,d);for(e=0,a=s.p.length;a>e;e++)$e(t,"pageButton")(t,s.p[e],e,h,f,d)}else n.fnUpdate(t,o)},sName:"pagination"})),i}function de(t,e,n){var a=t._iDisplayStart,r=t._iDisplayLength,o=t.fnRecordsDisplay();0===o||-1===r?a=0:"number"==typeof e?(a=e*r,a>o&&(a=0)):"first"==e?a=0:"previous"==e?(a=r>=0?a-r:0,0>a&&(a=0)):"next"==e?o>a+r&&(a+=r):"last"==e?a=Math.floor((o-1)/r)*r:ke(t,0,"Unknown paging action: "+e,5);var i=t._iDisplayStart!==a;return t._iDisplayStart=a,i&&(Me(t,null,"page",[t]),n&&V(t)),i}function he(t){return a("<div/>",{id:t.aanFeatures.r?null:t.sTableId+"_processing","class":t.oClasses.sProcessing}).html(t.oLanguage.sProcessing).insertBefore(t.nTable)[0]}function pe(t,e){t.oFeatures.bProcessing&&a(t.aanFeatures.r).css("display",e?"block":"none"),Me(t,null,"processing",[t,e])}function ge(t){var e=a(t.nTable);e.attr("role","grid");var n=t.oScroll;if(""===n.sX&&""===n.sY)return t.nTable;var r=n.sX,o=n.sY,i=t.oClasses,s=e.children("caption"),l=s.length?s[0]._captionSide:null,u=a(e[0].cloneNode(!1)),c=a(e[0].cloneNode(!1)),f=e.children("tfoot"),d="<div/>",h=function(t){return t?we(t):null};n.sX&&"100%"===e.attr("width")&&e.removeAttr("width"),f.length||(f=null);var p=a(d,{"class":i.sScrollWrapper}).append(a(d,{"class":i.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?h(r):"100%"}).append(a(d,{"class":i.sScrollHeadInner}).css({"box-sizing":"content-box",width:n.sXInner||"100%"}).append(u.removeAttr("id").css("margin-left",0).append(e.children("thead")))).append("top"===l?s:null)).append(a(d,{"class":i.sScrollBody}).css({overflow:"auto",height:h(o),width:h(r)}).append(e));f&&p.append(a(d,{"class":i.sScrollFoot}).css({overflow:"hidden",border:0,width:r?h(r):"100%"}).append(a(d,{"class":i.sScrollFootInner}).append(c.removeAttr("id").css("margin-left",0).append(e.children("tfoot")))).append("bottom"===l?s:null));var g=p.children(),b=g[0],m=g[1],v=f?g[2]:null;return r&&a(m).scroll(function(){var t=this.scrollLeft;b.scrollLeft=t,f&&(v.scrollLeft=t)}),t.nScrollHead=b,t.nScrollBody=m,t.nScrollFoot=v,t.aoDrawCallback.push({fn:be,sName:"scrolling"}),p[0]}function be(t){var e,n,r,o,i,s,l,u,c,f=t.oScroll,d=f.sX,h=f.sXInner,g=f.sY,b=f.iBarWidth,m=a(t.nScrollHead),v=m[0].style,S=m.children("div"),y=S[0].style,D=S.children("table"),C=t.nScrollBody,_=a(C),w=C.style,T=a(t.nScrollFoot),x=T.children("div"),I=x.children("table"),R=a(t.nTHead),A=a(t.nTable),F=A[0],L=F.style,P=t.nTFoot?a(t.nTFoot):null,N=t.oBrowser,j=N.bScrollOversize,O=[],k=[],H=[],V=function(t){var e=t.style;e.paddingTop="0",e.paddingBottom="0",e.borderTopWidth="0",e.borderBottomWidth="0",e.height=0};if(A.children("thead, tfoot").remove(),i=R.clone().prependTo(A),e=R.find("tr"),r=i.find("tr"),i.find("th, td").removeAttr("tabindex"),P&&(s=P.clone().prependTo(A),n=P.find("tr"),o=s.find("tr")),d||(w.width="100%",m[0].style.width="100%"),a.each(E(t,i),function(e,n){l=p(t,e),n.style.width=t.aoColumns[l].sWidth}),P&&me(function(t){t.style.width=""},o),f.bCollapse&&""!==g&&(w.height=_[0].offsetHeight+R[0].offsetHeight+"px"),c=A.outerWidth(),""===d?(L.width="100%",j&&(A.find("tbody").height()>C.offsetHeight||"scroll"==_.css("overflow-y"))&&(L.width=we(A.outerWidth()-b))):""!==h?L.width=we(h):c==_.width()&&_.height()<A.height()?(L.width=we(c-b),A.outerWidth()>c-b&&(L.width=we(c))):L.width=we(c),c=A.outerWidth(),me(V,r),me(function(t){H.push(t.innerHTML),O.push(we(a(t).css("width")))},r),me(function(t,e){t.style.width=O[e]},e),a(r).height(0),P&&(me(V,o),me(function(t){k.push(we(a(t).css("width")))},o),me(function(t,e){t.style.width=k[e]},n),a(o).height(0)),me(function(t,e){t.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+H[e]+"</div>",t.style.width=O[e]},r),P&&me(function(t,e){t.innerHTML="",t.style.width=k[e]},o),A.outerWidth()<c?(u=C.scrollHeight>C.offsetHeight||"scroll"==_.css("overflow-y")?c+b:c,j&&(C.scrollHeight>C.offsetHeight||"scroll"==_.css("overflow-y"))&&(L.width=we(u-b)),(""===d||""!==h)&&ke(t,1,"Possible column misalignment",6)):u="100%",w.width=we(u),v.width=we(u),P&&(t.nScrollFoot.style.width=we(u)),g||j&&(w.height=we(F.offsetHeight+b)),g&&f.bCollapse){w.height=we(g);var U=d&&F.offsetWidth>C.offsetWidth?b:0;F.offsetHeight<C.offsetHeight&&(w.height=we(F.offsetHeight+U))}var W=A.outerWidth();D[0].style.width=we(W),y.width=we(W);var M=A.height()>C.clientHeight||"scroll"==_.css("overflow-y"),$="padding"+(N.bScrollbarLeft?"Left":"Right");y[$]=M?b+"px":"0px",P&&(I[0].style.width=we(W),x[0].style.width=we(W),x[0].style[$]=M?b+"px":"0px"),_.scroll(),!t.bSorted&&!t.bFiltered||t._drawHold||(C.scrollTop=0)}function me(t,e,n){for(var a,r,o=0,i=0,s=e.length;s>i;){for(a=e[i].firstChild,r=n?n[i].firstChild:null;a;)1===a.nodeType&&(n?t(a,r,o):t(a,o),o++),a=a.nextSibling,r=n?r.nextSibling:null;i++}}function ve(e){var n,r,o,i,s,l=e.nTable,u=e.aoColumns,c=e.oScroll,f=c.sY,d=c.sX,p=c.sXInner,g=u.length,v=m(e,"bVisible"),S=a("th",e.nTHead),y=l.getAttribute("width"),D=l.parentNode,C=!1;for(n=0;n<v.length;n++)r=u[v[n]],null!==r.sWidth&&(r.sWidth=ye(r.sWidthOrig,D),C=!0);if(C||d||f||g!=b(e)||g!=S.length){var _=a(l).clone().empty().css("visibility","hidden").removeAttr("id").append(a(e.nTHead).clone(!1)).append(a(e.nTFoot).clone(!1)).append(a("<tbody><tr/></tbody>"));_.find("tfoot th, tfoot td").css("width","");var w=_.find("tbody tr");for(S=E(e,_.find("thead")[0]),n=0;n<v.length;n++)r=u[v[n]],S[n].style.width=null!==r.sWidthOrig&&""!==r.sWidthOrig?we(r.sWidthOrig):"";
if(e.aoData.length)for(n=0;n<v.length;n++)o=v[n],r=u[o],a(Ce(e,o)).clone(!1).append(r.sContentPadding).appendTo(w);if(_.appendTo(D),d&&p?_.width(p):d?(_.css("width","auto"),_.width()<D.offsetWidth&&_.width(D.offsetWidth)):f?_.width(D.offsetWidth):y&&_.width(y),De(e,_[0]),d){var T=0;for(n=0;n<v.length;n++)r=u[v[n]],s=a(S[n]).outerWidth(),T+=null===r.sWidthOrig?s:parseInt(r.sWidth,10)+s-a(S[n]).width();_.width(we(T)),l.style.width=we(T)}for(n=0;n<v.length;n++)r=u[v[n]],i=a(S[n]).width(),i&&(r.sWidth=we(i));l.style.width=we(_.css("width")),_.remove()}else for(n=0;g>n;n++)u[n].sWidth=we(S.eq(n).width());y&&(l.style.width=we(y)),!y&&!d||e._reszEvt||(a(t).bind("resize.DT-"+e.sInstance,Se(function(){h(e)})),e._reszEvt=!0)}function Se(t,e){var a,r,o=e||200;return function(){var e=this,i=+new Date,s=arguments;a&&a+o>i?(clearTimeout(r),r=setTimeout(function(){a=n,t.apply(e,s)},o)):a?(a=i,t.apply(e,s)):a=i}}function ye(t,n){if(!t)return 0;var r=a("<div/>").css("width",we(t)).appendTo(n||e.body),o=r[0].offsetWidth;return r.remove(),o}function De(t,e){var n=t.oScroll;if(n.sX||n.sY){var r=n.sX?0:n.iBarWidth;e.style.width=we(a(e).outerWidth()-r)}}function Ce(t,e){var n=_e(t,e);if(0>n)return null;var r=t.aoData[n];return r.nTr?r.anCells[e]:a("<td/>").html(w(t,n,e,"display"))[0]}function _e(t,e){for(var n,a=-1,r=-1,o=0,i=t.aoData.length;i>o;o++)n=w(t,o,e,"display")+"",n=n.replace(_n,""),n.length>a&&(a=n.length,r=o);return r}function we(t){return null===t?"0px":"number"==typeof t?0>t?"0px":t+"px":t.match(/\d$/)?t+"px":t}function Te(){if(!Xe.__scrollbarWidth){var t=a("<p/>").css({width:"100%",height:200,padding:0})[0],e=a("<div/>").css({position:"absolute",top:0,left:0,width:200,height:150,padding:0,overflow:"hidden",visibility:"hidden"}).append(t).appendTo("body"),n=t.offsetWidth;e.css("overflow","scroll");var r=t.offsetWidth;n===r&&(r=e[0].clientWidth),e.remove(),Xe.__scrollbarWidth=n-r}return Xe.__scrollbarWidth}function xe(t){var e,n,r,o,i,s,l,u=[],c=t.aoColumns,f=t.aaSortingFixed,d=a.isPlainObject(f),h=[],p=function(t){t.length&&!a.isArray(t[0])?h.push(t):h.push.apply(h,t)};for(a.isArray(f)&&p(f),d&&f.pre&&p(f.pre),p(t.aaSorting),d&&f.post&&p(f.post),e=0;e<h.length;e++)for(l=h[e][0],o=c[l].aDataSort,n=0,r=o.length;r>n;n++)i=o[n],s=c[i].sType||"string",u.push({src:l,col:i,dir:h[e][1],index:h[e][2],type:s,formatter:Xe.ext.type.order[s+"-pre"]});return u}function Ie(t){var e,n,a,r,o,i=[],s=Xe.ext.type.order,l=t.aoData,u=(t.aoColumns,0),c=t.aiDisplayMaster;for(v(t),o=xe(t),e=0,n=o.length;n>e;e++)r=o[e],r.formatter&&u++,Pe(t,r.col);if("ssp"!=Be(t)&&0!==o.length){for(e=0,a=c.length;a>e;e++)i[c[e]]=e;u===o.length?c.sort(function(t,e){var n,a,r,s,u,c=o.length,f=l[t]._aSortData,d=l[e]._aSortData;for(r=0;c>r;r++)if(u=o[r],n=f[u.col],a=d[u.col],s=a>n?-1:n>a?1:0,0!==s)return"asc"===u.dir?s:-s;return n=i[t],a=i[e],a>n?-1:n>a?1:0}):c.sort(function(t,e){var n,a,r,u,c,f,d=o.length,h=l[t]._aSortData,p=l[e]._aSortData;for(r=0;d>r;r++)if(c=o[r],n=h[c.col],a=p[c.col],f=s[c.type+"-"+c.dir]||s["string-"+c.dir],u=f(n,a),0!==u)return u;return n=i[t],a=i[e],a>n?-1:n>a?1:0})}t.bSorted=!0}function Re(t){for(var e,n,a=t.aoColumns,r=xe(t),o=t.oLanguage.oAria,i=0,s=a.length;s>i;i++){var l=a[i],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),f=l.nTh;f.removeAttribute("aria-sort"),l.bSortable?(r.length>0&&r[0].col==i?(f.setAttribute("aria-sort","asc"==r[0].dir?"ascending":"descending"),n=u[r[0].index+1]||u[0]):n=u[0],e=c+("asc"===n?o.sSortAscending:o.sSortDescending)):e=c,f.setAttribute("aria-label",e)}}function Ae(t,e,r,o){var i,s=t.aoColumns[e],l=t.aaSorting,u=s.asSorting,c=function(t){var e=t._idx;return e===n&&(e=a.inArray(t[1],u)),e+1>=u.length?0:e+1};if("number"==typeof l[0]&&(l=t.aaSorting=[l]),r&&t.oFeatures.bSortMulti){var f=a.inArray(e,hn(l,"0"));-1!==f?(i=c(l[f]),l[f][1]=u[i],l[f]._idx=i):(l.push([e,u[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==e?(i=c(l[0]),l.length=1,l[0][1]=u[i],l[0]._idx=i):(l.length=0,l.push([e,u[0]]),l[0]._idx=0);U(t),"function"==typeof o&&o(t)}function Fe(t,e,n,a){var r=t.aoColumns[n];Ue(e,{},function(e){r.bSortable!==!1&&(t.oFeatures.bProcessing?(pe(t,!0),setTimeout(function(){Ae(t,n,e.shiftKey,a),"ssp"!==Be(t)&&pe(t,!1)},0)):Ae(t,n,e.shiftKey,a))})}function Le(t){var e,n,r,o=t.aLastSort,i=t.oClasses.sSortColumn,s=xe(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(e=0,n=o.length;n>e;e++)r=o[e].src,a(hn(t.aoData,"anCells",r)).removeClass(i+(2>e?e+1:3));for(e=0,n=s.length;n>e;e++)r=s[e].src,a(hn(t.aoData,"anCells",r)).addClass(i+(2>e?e+1:3))}t.aLastSort=s}function Pe(t,e){var n,a=t.aoColumns[e],r=Xe.ext.order[a.sSortDataType];r&&(n=r.call(t.oInstance,t,e,g(t,e)));for(var o,i,s=Xe.ext.type.order[a.sType+"-pre"],l=0,u=t.aoData.length;u>l;l++)o=t.aoData[l],o._aSortData||(o._aSortData=[]),(!o._aSortData[e]||r)&&(i=r?n[l]:w(t,l,e,"sort"),o._aSortData[e]=s?s(i):i)}function Ne(t){if(t.oFeatures.bStateSave&&!t.bDestroying){var e={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:a.extend(!0,[],t.aaSorting),search:ne(t.oPreviousSearch),columns:a.map(t.aoColumns,function(e,n){return{visible:e.bVisible,search:ne(t.aoPreSearchCols[n])}})};Me(t,"aoStateSaveParams","stateSaveParams",[t,e]),t.oSavedState=e,t.fnStateSaveCallback.call(t.oInstance,t,e)}}function je(t){var e,n,r=t.aoColumns;if(t.oFeatures.bStateSave){var o=t.fnStateLoadCallback.call(t.oInstance,t);if(o&&o.time){var i=Me(t,"aoStateLoadParams","stateLoadParams",[t,o]);if(-1===a.inArray(!1,i)){var s=t.iStateDuration;if(!(s>0&&o.time<+new Date-1e3*s)&&r.length===o.columns.length){for(t.oLoadedState=a.extend(!0,{},o),t._iDisplayStart=o.start,t.iInitDisplayStart=o.start,t._iDisplayLength=o.length,t.aaSorting=[],a.each(o.order,function(e,n){t.aaSorting.push(n[0]>=r.length?[0,n[1]]:n)}),a.extend(t.oPreviousSearch,ae(o.search)),e=0,n=o.columns.length;n>e;e++){var l=o.columns[e];r[e].bVisible=l.visible,a.extend(t.aoPreSearchCols[e],ae(l.search))}Me(t,"aoStateLoaded","stateLoaded",[t,o])}}}}}function Oe(t){var e=Xe.settings,n=a.inArray(t,hn(e,"nTable"));return-1!==n?e[n]:null}function ke(e,n,a,r){if(a="DataTables warning: "+(null!==e?"table id="+e.sTableId+" - ":"")+a,r&&(a+=". For more information about this error, please see http://datatables.net/tn/"+r),n)t.console&&console.log&&console.log(a);else{var o=Xe.ext,i=o.sErrMode||o.errMode;if("alert"!=i)throw new Error(a);alert(a)}}function He(t,e,r,o){return a.isArray(r)?(a.each(r,function(n,r){a.isArray(r)?He(t,e,r[0],r[1]):He(t,e,r)}),void 0):(o===n&&(o=r),e[r]!==n&&(t[o]=e[r]),void 0)}function Ve(t,e,n){var r;for(var o in e)e.hasOwnProperty(o)&&(r=e[o],a.isPlainObject(r)?(a.isPlainObject(t[o])||(t[o]={}),a.extend(!0,t[o],r)):t[o]=n&&"data"!==o&&"aaData"!==o&&a.isArray(r)?r.slice():r);return t}function Ue(t,e,n){a(t).bind("click.DT",e,function(e){t.blur(),n(e)}).bind("keypress.DT",e,function(t){13===t.which&&(t.preventDefault(),n(t))}).bind("selectstart.DT",function(){return!1})}function We(t,e,n,a){n&&t[e].push({fn:n,sName:a})}function Me(t,e,n,r){var o=[];return e&&(o=a.map(t[e].slice().reverse(),function(e){return e.fn.apply(t.oInstance,r)})),null!==n&&a(t.nTable).trigger(n+".dt",r),o}function Ee(t){var e=t._iDisplayStart,n=t.fnDisplayEnd(),a=t._iDisplayLength;n===t.fnRecordsDisplay()&&(e=n-a),(-1===a||0>e)&&(e=0),t._iDisplayStart=e}function $e(t,e){var n=t.renderer,r=Xe.ext.renderer[e];return a.isPlainObject(n)&&n[e]?r[n[e]]||r._:"string"==typeof n?r[n]||r._:r._}function Be(t){return t.oFeatures.bServerSide?"ssp":t.ajax||t.sAjaxSource?"ajax":"dom"}function Je(t,e){var n=[],a=Jn.numbers_length,r=Math.floor(a/2);return a>=e?n=gn(0,e):r>=t?(n=gn(0,a-2),n.push("ellipsis"),n.push(e-1)):t>=e-1-r?(n=gn(e-(a-2),e),n.splice(0,0,"ellipsis"),n.splice(0,0,0)):(n=gn(t-1,t+2),n.push("ellipsis"),n.push(e-1),n.splice(0,0,"ellipsis"),n.splice(0,0,0)),n.DT_el="span",n}function qe(t){a.each({num:function(e){return qn(e,t)},"num-fmt":function(e){return qn(e,t,on)},"html-num":function(e){return qn(e,t,en)},"html-num-fmt":function(e){return qn(e,t,en,on)}},function(e,n){Ge.type.order[e+t+"-pre"]=n})}function ze(t){return function(){var e=[Oe(this[Xe.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Xe.ext.internal[t].apply(this,e)}}var Xe,Ge,Qe,Ye,Ze,Ke={},tn=/[\r\n]/g,en=/<.*?>/g,nn=/^[\w\+\-]/,an=/[\w\+\-]$/,rn=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),on=/[',$£€¥%\u2009\u202F]/g,sn=function(t){return t&&t!==!0&&"-"!==t?!1:!0},ln=function(t){var e=parseInt(t,10);return!isNaN(e)&&isFinite(t)?e:null},un=function(t,e){return Ke[e]||(Ke[e]=new RegExp(te(e),"g")),"string"==typeof t?t.replace(/\./g,"").replace(Ke[e],"."):t},cn=function(t,e,n){var a="string"==typeof t;return e&&a&&(t=un(t,e)),n&&a&&(t=t.replace(on,"")),sn(t)||!isNaN(parseFloat(t))&&isFinite(t)},fn=function(t){return sn(t)||"string"==typeof t},dn=function(t,e,n){if(sn(t))return!0;var a=fn(t);return a?cn(bn(t),e,n)?!0:null:null},hn=function(t,e,a){var r=[],o=0,i=t.length;if(a!==n)for(;i>o;o++)t[o]&&t[o][e]&&r.push(t[o][e][a]);else for(;i>o;o++)t[o]&&r.push(t[o][e]);return r},pn=function(t,e,a,r){var o=[],i=0,s=e.length;if(r!==n)for(;s>i;i++)o.push(t[e[i]][a][r]);else for(;s>i;i++)o.push(t[e[i]][a]);return o},gn=function(t,e){var a,r=[];e===n?(e=0,a=t):(a=e,e=t);for(var o=e;a>o;o++)r.push(o);return r},bn=function(t){return t.replace(en,"")},mn=function(t){var e,n,a,r=[],o=t.length,i=0;t:for(n=0;o>n;n++){for(e=t[n],a=0;i>a;a++)if(r[a]===e)continue t;r.push(e),i++}return r},vn=function(t,e,a){t[e]!==n&&(t[a]=t[e])},Sn=/\[.*?\]$/,yn=/\(\)$/,Dn=a("<div>")[0],Cn=Dn.textContent!==n,_n=/<.*?>/g;Xe=function(t){this.$=function(t,e){return this.api(!0).$(t,e)},this._=function(t,e){return this.api(!0).rows(t,e).data()},this.api=function(t){return t?new Qe(Oe(this[Ge.iApiIndex])):new Qe(this)},this.fnAddData=function(t,e){var r=this.api(!0),o=a.isArray(t)&&(a.isArray(t[0])||a.isPlainObject(t[0]))?r.rows.add(t):r.row.add(t);return(e===n||e)&&r.draw(),o.flatten().toArray()},this.fnAdjustColumnSizing=function(t){var e=this.api(!0).columns.adjust(),a=e.settings()[0],r=a.oScroll;t===n||t?e.draw(!1):(""!==r.sX||""!==r.sY)&&be(a)},this.fnClearTable=function(t){var e=this.api(!0).clear();(t===n||t)&&e.draw()},this.fnClose=function(t){this.api(!0).row(t).child.hide()},this.fnDeleteRow=function(t,e,a){var r=this.api(!0),o=r.rows(t),i=o.settings()[0],s=i.aoData[o[0][0]];return o.remove(),e&&e.call(this,i,s),(a===n||a)&&r.draw(),s},this.fnDestroy=function(t){this.api(!0).destroy(t)},this.fnDraw=function(t){this.api(!0).draw(!t)},this.fnFilter=function(t,e,a,r,o,i){var s=this.api(!0);null===e||e===n?s.search(t,a,r,i):s.column(e).search(t,a,r,i),s.draw()},this.fnGetData=function(t,e){var a=this.api(!0);if(t!==n){var r=t.nodeName?t.nodeName.toLowerCase():"";return e!==n||"td"==r||"th"==r?a.cell(t,e).data():a.row(t).data()||null}return a.data().toArray()},this.fnGetNodes=function(t){var e=this.api(!0);return t!==n?e.row(t).node():e.rows().nodes().flatten().toArray()},this.fnGetPosition=function(t){var e=this.api(!0),n=t.nodeName.toUpperCase();if("TR"==n)return e.row(t).index();if("TD"==n||"TH"==n){var a=e.cell(t).index();return[a.row,a.columnVisible,a.column]}return null},this.fnIsOpen=function(t){return this.api(!0).row(t).child.isShown()},this.fnOpen=function(t,e,n){return this.api(!0).row(t).child(e,n).show().child()[0]},this.fnPageChange=function(t,e){var a=this.api(!0).page(t);(e===n||e)&&a.draw(!1)},this.fnSetColumnVis=function(t,e,a){var r=this.api(!0).column(t).visible(e);(a===n||a)&&r.columns.adjust().draw()},this.fnSettings=function(){return Oe(this[Ge.iApiIndex])},this.fnSort=function(t){this.api(!0).order(t).draw()},this.fnSortListener=function(t,e,n){this.api(!0).order.listener(t,e,n)},this.fnUpdate=function(t,e,a,r,o){var i=this.api(!0);return a===n||null===a?i.row(e).data(t):i.cell(e,a).data(t),(o===n||o)&&i.columns.adjust(),(r===n||r)&&i.draw(),0},this.fnVersionCheck=Ge.fnVersionCheck;var e=this,r=t===n,c=this.length;r&&(t={}),this.oApi=this.internal=Ge.internal;for(var h in Xe.ext.internal)h&&(this[h]=ze(h));return this.each(function(){var h,p={},g=c>1?Ve(p,t,!0):t,b=0,m=this.getAttribute("id"),v=!1,C=Xe.defaults;if("table"!=this.nodeName.toLowerCase())return ke(null,0,"Non-table node initialisation ("+this.nodeName+")",2),void 0;s(C),l(C.column),o(C,C,!0),o(C.column,C.column,!0),o(C,g);var _=Xe.settings;for(b=0,h=_.length;h>b;b++){if(_[b].nTable==this){var w=g.bRetrieve!==n?g.bRetrieve:C.bRetrieve,T=g.bDestroy!==n?g.bDestroy:C.bDestroy;if(r||w)return _[b].oInstance;if(T){_[b].oInstance.fnDestroy();break}return ke(_[b],0,"Cannot reinitialise DataTable",3),void 0}if(_[b].sTableId==this.id){_.splice(b,1);break}}(null===m||""===m)&&(m="DataTables_Table_"+Xe.ext._unique++,this.id=m);var x=a.extend(!0,{},Xe.models.oSettings,{nTable:this,oApi:e.internal,oInit:g,sDestroyWidth:a(this)[0].style.width,sInstance:m,sTableId:m});_.push(x),x.oInstance=1===e.length?e:a(this).dataTable(),s(g),g.oLanguage&&i(g.oLanguage),g.aLengthMenu&&!g.iDisplayLength&&(g.iDisplayLength=a.isArray(g.aLengthMenu[0])?g.aLengthMenu[0][0]:g.aLengthMenu[0]),g=Ve(a.extend(!0,{},C),g),He(x.oFeatures,g,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),He(x,g,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),He(x.oScroll,g,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),He(x.oLanguage,g,"fnInfoCallback"),We(x,"aoDrawCallback",g.fnDrawCallback,"user"),We(x,"aoServerParams",g.fnServerParams,"user"),We(x,"aoStateSaveParams",g.fnStateSaveParams,"user"),We(x,"aoStateLoadParams",g.fnStateLoadParams,"user"),We(x,"aoStateLoaded",g.fnStateLoaded,"user"),We(x,"aoRowCallback",g.fnRowCallback,"user"),We(x,"aoRowCreatedCallback",g.fnCreatedRow,"user"),We(x,"aoHeaderCallback",g.fnHeaderCallback,"user"),We(x,"aoFooterCallback",g.fnFooterCallback,"user"),We(x,"aoInitComplete",g.fnInitComplete,"user"),We(x,"aoPreDrawCallback",g.fnPreDrawCallback,"user");var I=x.oClasses;if(g.bJQueryUI?(a.extend(I,Xe.ext.oJUIClasses,g.oClasses),g.sDom===C.sDom&&"lfrtip"===C.sDom&&(x.sDom='<"H"lfr>t<"F"ip>'),x.renderer?a.isPlainObject(x.renderer)&&!x.renderer.header&&(x.renderer.header="jqueryui"):x.renderer="jqueryui"):a.extend(I,Xe.ext.classes,g.oClasses),a(this).addClass(I.sTable),(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(x.oScroll.iBarWidth=Te()),x.oScroll.sX===!0&&(x.oScroll.sX="100%"),x.iInitDisplayStart===n&&(x.iInitDisplayStart=g.iDisplayStart,x._iDisplayStart=g.iDisplayStart),null!==g.iDeferLoading){x.bDeferLoading=!0;var R=a.isArray(g.iDeferLoading);x._iRecordsDisplay=R?g.iDeferLoading[0]:g.iDeferLoading,x._iRecordsTotal=R?g.iDeferLoading[1]:g.iDeferLoading}""!==g.oLanguage.sUrl?(x.oLanguage.sUrl=g.oLanguage.sUrl,a.getJSON(x.oLanguage.sUrl,null,function(t){i(t),o(C.oLanguage,t),a.extend(!0,x.oLanguage,g.oLanguage,t),se(x)}),v=!0):a.extend(!0,x.oLanguage,g.oLanguage),null===g.asStripeClasses&&(x.asStripeClasses=[I.sStripeOdd,I.sStripeEven]);var A=x.asStripeClasses,F=a("tbody tr:eq(0)",this);-1!==a.inArray(!0,a.map(A,function(t){return F.hasClass(t)}))&&(a("tbody tr",this).removeClass(A.join(" ")),x.asDestroyStripes=A.slice());var L,P=[],j=this.getElementsByTagName("thead");if(0!==j.length&&(M(x.aoHeader,j[0]),P=E(x)),null===g.aoColumns)for(L=[],b=0,h=P.length;h>b;b++)L.push(null);else L=g.aoColumns;for(b=0,h=L.length;h>b;b++)f(x,P?P[b]:null);if(S(x,g.aoColumnDefs,L,function(t,e){d(x,t,e)}),F.length){var O=function(t,e){return t.getAttribute("data-"+e)?e:null};a.each(N(x,F[0]).cells,function(t,e){var a=x.aoColumns[t];if(a.mData===t){var r=O(e,"sort")||O(e,"order"),o=O(e,"filter")||O(e,"search");(null!==r||null!==o)&&(a.mData={_:t+".display",sort:null!==r?t+".@data-"+r:n,type:null!==r?t+".@data-"+r:n,filter:null!==o?t+".@data-"+o:n},d(x,t))}})}var k=x.oFeatures;if(g.bStateSave&&(k.bStateSave=!0,je(x,g),We(x,"aoDrawCallback",Ne,"state_save")),g.aaSorting===n){var H=x.aaSorting;for(b=0,h=H.length;h>b;b++)H[b][1]=x.aoColumns[b].asSorting[0]}Le(x),k.bSort&&We(x,"aoDrawCallback",function(){if(x.bSorted){var t=xe(x),e={};a.each(t,function(t,n){e[n.src]=n.dir}),Me(x,null,"order",[x,t,e]),Re(x)}}),We(x,"aoDrawCallback",function(){(x.bSorted||"ssp"===Be(x)||k.bDeferRender)&&Le(x)},"sc"),u(x);var V=a(this).children("caption").each(function(){this._captionSide=a(this).css("caption-side")}),U=a(this).children("thead");0===U.length&&(U=a("<thead/>").appendTo(this)),x.nTHead=U[0];var W=a(this).children("tbody");0===W.length&&(W=a("<tbody/>").appendTo(this)),x.nTBody=W[0];var $=a(this).children("tfoot");if(0===$.length&&V.length>0&&(""!==x.oScroll.sX||""!==x.oScroll.sY)&&($=a("<tfoot/>").appendTo(this)),0===$.length||0===$.children().length?a(this).addClass(I.sNoFooter):$.length>0&&(x.nTFoot=$[0],M(x.aoFooter,x.nTFoot)),g.aaData)for(b=0;b<g.aaData.length;b++)y(x,g.aaData[b]);else(x.bDeferLoading||"dom"==Be(x))&&D(x,a(x.nTBody).children("tr"));x.aiDisplay=x.aiDisplayMaster.slice(),x.bInitialised=!0,v===!1&&se(x)}),e=null,this};var wn=[],Tn=Array.prototype,xn=function(t){var e,n,r=Xe.settings,o=a.map(r,function(t){return t.nTable});return t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?(e=a.inArray(t,o),-1!==e?[r[e]]:null):t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?n=a(t):t instanceof a&&(n=t),n?n.map(function(){return e=a.inArray(this,o),-1!==e?r[e]:null}).toArray():void 0):[]};Qe=function(t,e){if(!this instanceof Qe)throw"DT API must be constructed as a new object";var n=[],r=function(t){var e=xn(t);e&&n.push.apply(n,e)};if(a.isArray(t))for(var o=0,i=t.length;i>o;o++)r(t[o]);else r(t);this.context=mn(n),e&&this.push.apply(this,e.toArray?e.toArray():e),this.selector={rows:null,cols:null,opts:null},Qe.extend(this,this,wn)},Xe.Api=Qe,Qe.prototype={concat:Tn.concat,context:[],each:function(t){for(var e=0,n=this.length;n>e;e++)t.call(this,this[e],e,this);return this},eq:function(t){var e=this.context;return e.length>t?new Qe(e[t],this[t]):null},filter:function(t){var e=[];if(Tn.filter)e=Tn.filter.call(this,t,this);else for(var n=0,a=this.length;a>n;n++)t.call(this,this[n],n,this)&&e.push(this[n]);return new Qe(this.context,e)},flatten:function(){var t=[];return new Qe(this.context,t.concat.apply(t,this.toArray()))},join:Tn.join,indexOf:Tn.indexOf||function(t,e){for(var n=e||0,a=this.length;a>n;n++)if(this[n]===t)return n;return-1},iterator:function(t,e,a){var r,o,i,s,l,u,c,f,d=[],h=this.context,p=this.selector;for("string"==typeof t&&(a=e,e=t,t=!1),o=0,i=h.length;i>o;o++)if("table"===e)r=a(h[o],o),r!==n&&d.push(r);else if("columns"===e||"rows"===e)r=a(h[o],this[o],o),r!==n&&d.push(r);else if("column"===e||"column-rows"===e||"row"===e||"cell"===e)for(c=this[o],"column-rows"===e&&(u=Pn(h[o],p.opts)),s=0,l=c.length;l>s;s++)f=c[s],r="cell"===e?a(h[o],f.row,f.column,o,s):a(h[o],f,o,s,u),r!==n&&d.push(r);if(d.length){var g=new Qe(h,t?d.concat.apply([],d):d),b=g.selector;return b.rows=p.rows,b.cols=p.cols,b.opts=p.opts,g}return this},lastIndexOf:Tn.lastIndexOf||function(){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(t){var e=[];if(Tn.map)e=Tn.map.call(this,t,this);else for(var n=0,a=this.length;a>n;n++)e.push(t.call(this,this[n],n));return new Qe(this.context,e)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Tn.pop,push:Tn.push,reduce:Tn.reduce||function(t,e){return c(this,t,e,0,this.length,1)},reduceRight:Tn.reduceRight||function(t,e){return c(this,t,e,this.length-1,-1,-1)},reverse:Tn.reverse,selector:null,shift:Tn.shift,sort:Tn.sort,splice:Tn.splice,toArray:function(){return Tn.slice.call(this)},to$:function(){return a(this)},toJQuery:function(){return a(this)},unique:function(){return new Qe(this.context,mn(this))},unshift:Tn.unshift},Qe.extend=function(t,e,n){if(e&&(e instanceof Qe||e.__dt_wrapper)){var r,o,i,s=function(t,e,n){return function(){var a=e.apply(t,arguments);return Qe.extend(a,a,n.methodExt),a}};for(r=0,o=n.length;o>r;r++)i=n[r],e[i.name]="function"==typeof i.val?s(t,i.val,i):a.isPlainObject(i.val)?{}:i.val,e[i.name].__dt_wrapper=!0,Qe.extend(t,e[i.name],i.propExt)}},Qe.register=Ye=function(t,e){if(a.isArray(t))for(var n=0,r=t.length;r>n;n++)Qe.register(t[n],e);else{var o,i,s,l,u=t.split("."),c=wn,f=function(t,e){for(var n=0,a=t.length;a>n;n++)if(t[n].name===e)return t[n];return null};for(o=0,i=u.length;i>o;o++){l=-1!==u[o].indexOf("()"),s=l?u[o].replace("()",""):u[o];var d=f(c,s);d||(d={name:s,val:{},methodExt:[],propExt:[]},c.push(d)),o===i-1?d.val=e:c=l?d.methodExt:d.propExt}}},Qe.registerPlural=Ze=function(t,e,r){Qe.register(t,r),Qe.register(e,function(){var t=r.apply(this,arguments);return t===this?this:t instanceof Qe?t.length?a.isArray(t[0])?new Qe(t.context,t[0]):t[0]:n:t})};var In=function(t,e){if("number"==typeof t)return[e[t]];var n=a.map(e,function(t){return t.nTable});return a(n).filter(t).map(function(){var t=a.inArray(this,n);return e[t]}).toArray()};Ye("tables()",function(t){return t?new Qe(In(t,this.context)):this}),Ye("table()",function(t){var e=this.tables(t),n=e.context;return n.length?new Qe(n[0]):e}),Ze("tables().nodes()","table().node()",function(){return this.iterator("table",function(t){return t.nTable})}),Ze("tables().body()","table().body()",function(){return this.iterator("table",function(t){return t.nTBody})}),Ze("tables().header()","table().header()",function(){return this.iterator("table",function(t){return t.nTHead})}),Ze("tables().footer()","table().footer()",function(){return this.iterator("table",function(t){return t.nTFoot})}),Ze("tables().containers()","table().container()",function(){return this.iterator("table",function(t){return t.nTableWrapper})}),Ye("draw()",function(t){return this.iterator("table",function(e){U(e,t===!1)})}),Ye("page()",function(t){return t===n?this.page.info().page:this.iterator("table",function(e){de(e,t)})}),Ye("page.info()",function(){if(0===this.context.length)return n;var t=this.context[0],e=t._iDisplayStart,a=t._iDisplayLength,r=t.fnRecordsDisplay(),o=-1===a;return{page:o?0:Math.floor(e/a),pages:o?1:Math.ceil(r/a),start:e,end:t.fnDisplayEnd(),length:a,recordsTotal:t.fnRecordsTotal(),recordsDisplay:r}}),Ye("page.len()",function(t){return t===n?0!==this.context.length?this.context[0]._iDisplayLength:n:this.iterator("table",function(e){ue(e,t)})});var Rn=function(t,e,n){if("ssp"==Be(t)?U(t,e):(pe(t,!0),$(t,[],function(n){F(t);for(var a=z(t,n),r=0,o=a.length;o>r;r++)y(t,a[r]);U(t,e),pe(t,!1)})),n){var a=new Qe(t);a.one("draw",function(){n(a.ajax.json())})}};Ye("ajax.json()",function(){var t=this.context;return t.length>0?t[0].json:void 0}),Ye("ajax.params()",function(){var t=this.context;return t.length>0?t[0].oAjaxData:void 0}),Ye("ajax.reload()",function(t,e){return this.iterator("table",function(n){Rn(n,e===!1,t)})}),Ye("ajax.url()",function(t){var e=this.context;return t===n?0===e.length?n:(e=e[0],e.ajax?a.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource):this.iterator("table",function(e){a.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),Ye("ajax.url().load()",function(t,e){return this.iterator("table",function(n){Rn(n,e===!1,t)})});var An=function(t,e){var r,o,i,s,l,u,c=[];for(t&&"string"!=typeof t&&t.length!==n||(t=[t]),i=0,s=t.length;s>i;i++)for(o=t[i]&&t[i].split?t[i].split(","):[t[i]],l=0,u=o.length;u>l;l++)r=e("string"==typeof o[l]?a.trim(o[l]):o[l]),r&&r.length&&c.push.apply(c,r);return c},Fn=function(t){return t||(t={}),t.filter&&!t.search&&(t.search=t.filter),{search:t.search||"none",order:t.order||"current",page:t.page||"all"}},Ln=function(t){for(var e=0,n=t.length;n>e;e++)if(t[e].length>0)return t[0]=t[e],t.length=1,t.context=[t.context[e]],t;return t.length=0,t},Pn=function(t,e){var n,r,o,i=[],s=t.aiDisplay,l=t.aiDisplayMaster,u=e.search,c=e.order,f=e.page;if("ssp"==Be(t))return"removed"===u?[]:gn(0,l.length);if("current"==f)for(n=t._iDisplayStart,r=t.fnDisplayEnd();r>n;n++)i.push(s[n]);else if("current"==c||"applied"==c)i="none"==u?l.slice():"applied"==u?s.slice():a.map(l,function(t){return-1===a.inArray(t,s)?t:null});else if("index"==c||"original"==c)for(n=0,r=t.aoData.length;r>n;n++)"none"==u?i.push(n):(o=a.inArray(n,s),(-1===o&&"removed"==u||o>=0&&"applied"==u)&&i.push(n));return i},Nn=function(t,e,n){return An(e,function(e){var r=ln(e);if(null!==r&&!n)return[r];var o=Pn(t,n);if(null!==r&&-1!==a.inArray(r,o))return[r];if(!e)return o;for(var i=[],s=0,l=o.length;l>s;s++)i.push(t.aoData[o[s]].nTr);return e.nodeName&&-1!==a.inArray(e,i)?[e._DT_RowIndex]:a(i).filter(e).map(function(){return this._DT_RowIndex}).toArray()})};Ye("rows()",function(t,e){t===n?t="":a.isPlainObject(t)&&(e=t,t=""),e=Fn(e);var r=this.iterator("table",function(n){return Nn(n,t,e)});return r.selector.rows=t,r.selector.opts=e,r}),Ye("rows().nodes()",function(){return this.iterator("row",function(t,e){return t.aoData[e].nTr||n})}),Ye("rows().data()",function(){return this.iterator(!0,"rows",function(t,e){return pn(t.aoData,e,"_aData")})}),Ze("rows().cache()","row().cache()",function(t){return this.iterator("row",function(e,n){var a=e.aoData[n];return"search"===t?a._aFilterData:a._aSortData})}),Ze("rows().invalidate()","row().invalidate()",function(t){return this.iterator("row",function(e,n){P(e,n,t)})}),Ze("rows().indexes()","row().index()",function(){return this.iterator("row",function(t,e){return e})}),Ze("rows().remove()","row().remove()",function(){var t=this;return this.iterator("row",function(e,n,r){var o=e.aoData;o.splice(n,1);for(var i=0,s=o.length;s>i;i++)null!==o[i].nTr&&(o[i].nTr._DT_RowIndex=i);a.inArray(n,e.aiDisplay);L(e.aiDisplayMaster,n),L(e.aiDisplay,n),L(t[r],n,!1),Ee(e)})}),Ye("rows.add()",function(t){var e=this.iterator("table",function(e){var n,a,r,o=[];for(a=0,r=t.length;r>a;a++)n=t[a],n.nodeName&&"TR"===n.nodeName.toUpperCase()?o.push(D(e,n)[0]):o.push(y(e,n));return o}),n=this.rows(-1);return n.pop(),n.push.apply(n,e.toArray()),n}),Ye("row()",function(t,e){return Ln(this.rows(t,e))}),Ye("row().data()",function(t){var e=this.context;return t===n?e.length&&this.length?e[0].aoData[this[0]]._aData:n:(e[0].aoData[this[0]]._aData=t,P(e[0],this[0],"data"),this)}),Ye("row().node()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]].nTr||null:null}),Ye("row.add()",function(t){t instanceof a&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?D(e,t)[0]:y(e,t)});return this.row(e[0])});var jn=function(t,e,n,r){var o=[],i=function(e,n){if(e.nodeName&&"tr"===e.nodeName.toLowerCase())o.push(e);else{var r=a("<tr><td/></tr>").addClass(n);a("td",r).addClass(n).html(e)[0].colSpan=b(t),o.push(r[0])}};if(a.isArray(n)||n instanceof a)for(var s=0,l=n.length;l>s;s++)i(n[s],r);else i(n,r);e._details&&e._details.remove(),e._details=a(o),e._detailsShow&&e._details.insertAfter(e.nTr)},On=function(t){var e=t.context;if(e.length&&t.length){var a=e[0].aoData[t[0]];a._details&&(a._details.remove(),a._detailsShow=n,a._details=n)}},kn=function(t,e){var n=t.context;if(n.length&&t.length){var a=n[0].aoData[t[0]];a._details&&(a._detailsShow=e,e?a._details.insertAfter(a.nTr):a._details.detach(),Hn(n[0]))}},Hn=function(t){var e=new Qe(t),n=".dt.DT_details",a="draw"+n,r="column-visibility"+n,o="destroy"+n,i=t.aoData;e.off(a+" "+r+" "+o),hn(i,"_details").length>0&&(e.on(a,function(n,a){t===a&&e.rows({page:"current"}).eq(0).each(function(t){var e=i[t];e._detailsShow&&e._details.insertAfter(e.nTr)})}),e.on(r,function(e,n){if(t===n)for(var a,r=b(n),o=0,s=i.length;s>o;o++)a=i[o],a._details&&a._details.children("td[colspan]").attr("colspan",r)}),e.on(o,function(e,n){if(t===n)for(var a=0,r=i.length;r>a;a++)i[a]._details&&On(i[a])}))},Vn="",Un=Vn+"row().child",Wn=Un+"()";Ye(Wn,function(t,e){var a=this.context;return t===n?a.length&&this.length?a[0].aoData[this[0]]._details:n:(t===!0?this.child.show():t===!1?On(this):a.length&&this.length&&jn(a[0],a[0].aoData[this[0]],t,e),this)}),Ye([Un+".show()",Wn+".show()"],function(){return kn(this,!0),this}),Ye([Un+".hide()",Wn+".hide()"],function(){return kn(this,!1),this}),Ye([Un+".remove()",Wn+".remove()"],function(){return On(this),this}),Ye(Un+".isShown()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]]._detailsShow||!1:!1});var Mn=/^(.+):(name|visIdx|visible)$/,En=function(t,e){var n=t.aoColumns,r=hn(n,"sName"),o=hn(n,"nTh");return An(e,function(e){var i=ln(e);if(""===e)return gn(n.length);if(null!==i)return[i>=0?i:n.length+i];var s="string"==typeof e?e.match(Mn):"";if(!s)return a(o).filter(e).map(function(){return a.inArray(this,o)}).toArray();switch(s[2]){case"visIdx":case"visible":var l=parseInt(s[1],10);if(0>l){var u=a.map(n,function(t,e){return t.bVisible?e:null});return[u[u.length+l]]}return[p(t,l)];case"name":return a.map(r,function(t,e){return t===s[1]?e:null})}})},$n=function(t,e,r,o){var i,s,l,u,c=t.aoColumns,f=c[e],d=t.aoData;if(r===n)return f.bVisible;if(f.bVisible!==r){if(r){var p=a.inArray(!0,hn(c,"bVisible"),e+1);for(s=0,l=d.length;l>s;s++)u=d[s].nTr,i=d[s].anCells,u&&u.insertBefore(i[e],i[p]||null)}else a(hn(t.aoData,"anCells",e)).detach();f.bVisible=r,H(t,t.aoHeader),H(t,t.aoFooter),(o===n||o)&&(h(t),(t.oScroll.sX||t.oScroll.sY)&&be(t)),Me(t,null,"column-visibility",[t,e,r]),Ne(t)}};Ye("columns()",function(t,e){t===n?t="":a.isPlainObject(t)&&(e=t,t=""),e=Fn(e);var r=this.iterator("table",function(n){return En(n,t,e)});return r.selector.cols=t,r.selector.opts=e,r}),Ze("columns().header()","column().header()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].nTh})}),Ze("columns().footer()","column().footer()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].nTf})}),Ze("columns().data()","column().data()",function(){return this.iterator("column-rows",function(t,e,n,a,r){for(var o=[],i=0,s=r.length;s>i;i++)o.push(w(t,r[i],e,""));return o})}),Ze("columns().cache()","column().cache()",function(t){return this.iterator("column-rows",function(e,n,a,r,o){return pn(e.aoData,o,"search"===t?"_aFilterData":"_aSortData",n)})}),Ze("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(t,e,n,a,r){return pn(t.aoData,r,"anCells",e)})}),Ze("columns().visible()","column().visible()",function(t,e){return this.iterator("column",function(a,r){return t===n?a.aoColumns[r].bVisible:$n(a,r,t,e)})}),Ze("columns().indexes()","column().index()",function(t){return this.iterator("column",function(e,n){return"visible"===t?g(e,n):n})}),Ye("columns.adjust()",function(){return this.iterator("table",function(t){h(t)})}),Ye("column.index()",function(t,e){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===t||"toData"===t)return p(n,e);if("fromData"===t||"toVisible"===t)return g(n,e)}}),Ye("column()",function(t,e){return Ln(this.columns(t,e))});var Bn=function(t,e,r){var o,i,s,l,u,c=t.aoData,f=Pn(t,r),d=pn(c,f,"anCells"),h=a([].concat.apply([],d)),p=t.aoColumns.length;return An(e,function(t){if(null===t||t===n){for(i=[],s=0,l=f.length;l>s;s++)for(o=f[s],u=0;p>u;u++)i.push({row:o,column:u});return i}return a.isPlainObject(t)?[t]:h.filter(t).map(function(t,e){return o=e.parentNode._DT_RowIndex,{row:o,column:a.inArray(e,c[o].anCells)}}).toArray()})};Ye("cells()",function(t,e,r){if(a.isPlainObject(t)&&(typeof t.row!==n?(r=e,e=null):(r=t,t=null)),a.isPlainObject(e)&&(r=e,e=null),null===e||e===n)return this.iterator("table",function(e){return Bn(e,t,Fn(r))});var o,i,s,l,u,c=this.columns(e,r),f=this.rows(t,r),d=this.iterator("table",function(t,e){for(o=[],i=0,s=f[e].length;s>i;i++)for(l=0,u=c[e].length;u>l;l++)o.push({row:f[e][i],column:c[e][l]});return o
});return a.extend(d.selector,{cols:e,rows:t,opts:r}),d}),Ze("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(t,e,n){return t.aoData[e].anCells[n]})}),Ye("cells().data()",function(){return this.iterator("cell",function(t,e,n){return w(t,e,n)})}),Ze("cells().cache()","cell().cache()",function(t){return t="search"===t?"_aFilterData":"_aSortData",this.iterator("cell",function(e,n,a){return e.aoData[n][t][a]})}),Ze("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(t,e,n){return{row:e,column:n,columnVisible:g(t,n)}})}),Ye(["cells().invalidate()","cell().invalidate()"],function(t){var e=this.selector;return this.rows(e.rows,e.opts).invalidate(t),this}),Ye("cell()",function(t,e,n){return Ln(this.cells(t,e,n))}),Ye("cell().data()",function(t){var e=this.context,a=this[0];return t===n?e.length&&a.length?w(e[0],a[0].row,a[0].column):n:(T(e[0],a[0].row,a[0].column,t),P(e[0],a[0].row,"data",a[0].column),this)}),Ye("order()",function(t,e){var r=this.context;return t===n?0!==r.length?r[0].aaSorting:n:("number"==typeof t?t=[[t,e]]:a.isArray(t[0])||(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Ye("order.listener()",function(t,e,n){return this.iterator("table",function(a){Fe(a,t,e,n)})}),Ye(["columns().order()","column().order()"],function(t){var e=this;return this.iterator("table",function(n,r){var o=[];a.each(e[r],function(e,n){o.push([n,t])}),n.aaSorting=o})}),Ye("search()",function(t,e,r,o){var i=this.context;return t===n?0!==i.length?i[0].oPreviousSearch.sSearch:n:this.iterator("table",function(n){n.oFeatures.bFilter&&G(n,a.extend({},n.oPreviousSearch,{sSearch:t+"",bRegex:null===e?!1:e,bSmart:null===r?!0:r,bCaseInsensitive:null===o?!0:o}),1)})}),Ze("columns().search()","column().search()",function(t,e,r,o){return this.iterator("column",function(i,s){var l=i.aoPreSearchCols;return t===n?l[s].sSearch:(i.oFeatures.bFilter&&(a.extend(l[s],{sSearch:t+"",bRegex:null===e?!1:e,bSmart:null===r?!0:r,bCaseInsensitive:null===o?!0:o}),G(i,i.oPreviousSearch,1)),void 0)})}),Ye("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Ye("state.clear()",function(){return this.iterator("table",function(t){t.fnStateSaveCallback.call(t.oInstance,t,{})})}),Ye("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Ye("state.save()",function(){return this.iterator("table",function(t){Ne(t)})}),Xe.versionCheck=Xe.fnVersionCheck=function(t){for(var e,n,a=Xe.version.split("."),r=t.split("."),o=0,i=r.length;i>o;o++)if(e=parseInt(a[o],10)||0,n=parseInt(r[o],10)||0,e!==n)return e>n;return!0},Xe.isDataTable=Xe.fnIsDataTable=function(t){var e=a(t).get(0),n=!1;return a.each(Xe.settings,function(t,a){(a.nTable===e||a.nScrollHead===e||a.nScrollFoot===e)&&(n=!0)}),n},Xe.tables=Xe.fnTables=function(t){return jQuery.map(Xe.settings,function(e){return!t||t&&a(e.nTable).is(":visible")?e.nTable:void 0})},Xe.camelToHungarian=o,Ye("$()",function(t,e){var n=this.rows(e).nodes(),r=a(n);return a([].concat(r.filter(t).toArray(),r.find(t).toArray()))}),a.each(["on","one","off"],function(t,e){Ye(e+"()",function(){var t=Array.prototype.slice.call(arguments);t[0].match(/\.dt\b/)||(t[0]+=".dt");var n=a(this.tables().nodes());return n[e].apply(n,t),this})}),Ye("clear()",function(){return this.iterator("table",function(t){F(t)})}),Ye("settings()",function(){return new Qe(this.context,this.context)}),Ye("data()",function(){return this.iterator("table",function(t){return hn(t.aoData,"_aData")}).flatten()}),Ye("destroy()",function(e){return e=e||!1,this.iterator("table",function(n){var r,o=n.nTableWrapper.parentNode,i=n.oClasses,s=n.nTable,l=n.nTBody,u=n.nTHead,c=n.nTFoot,f=a(s),d=a(l),h=a(n.nTableWrapper),p=a.map(n.aoData,function(t){return t.nTr});n.bDestroying=!0,Me(n,"aoDestroyCallback","destroy",[n]),e||new Qe(n).columns().visible(!0),h.unbind(".DT").find(":not(tbody *)").unbind(".DT"),a(t).unbind(".DT-"+n.sInstance),s!=u.parentNode&&(f.children("thead").detach(),f.append(u)),c&&s!=c.parentNode&&(f.children("tfoot").detach(),f.append(c)),f.detach(),h.detach(),n.aaSorting=[],n.aaSortingFixed=[],Le(n),a(p).removeClass(n.asStripeClasses.join(" ")),a("th, td",u).removeClass(i.sSortable+" "+i.sSortableAsc+" "+i.sSortableDesc+" "+i.sSortableNone),n.bJUI&&(a("th span."+i.sSortIcon+", td span."+i.sSortIcon,u).detach(),a("th, td",u).each(function(){var t=a("div."+i.sSortJUIWrapper,this);a(this).append(t.contents()),t.detach()})),!e&&o&&o.insertBefore(s,n.nTableReinsertBefore),d.children().detach(),d.append(p),f.css("width",n.sDestroyWidth).removeClass(i.sTable),r=n.asDestroyStripes.length,r&&d.children().each(function(t){a(this).addClass(n.asDestroyStripes[t%r])});var g=a.inArray(n,Xe.settings);-1!==g&&Xe.settings.splice(g,1)})}),Xe.version="1.10.2",Xe.settings=[],Xe.models={},Xe.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Xe.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null},Xe.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Xe.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(t){try{return JSON.parse((-1===t.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+t.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(t,e){try{(-1===t.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+t.sInstance+"_"+location.pathname,JSON.stringify(e))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:a.extend({},Xe.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null},r(Xe.defaults),Xe.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},r(Xe.defaults.column),Xe.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:n,oAjaxData:n,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==Be(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==Be(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var t=this._iDisplayLength,e=this._iDisplayStart,n=e+t,a=this.aiDisplay.length,r=this.oFeatures,o=r.bPaginate;return r.bServerSide?o===!1||-1===t?e+a:Math.min(e+t,this._iRecordsDisplay):!o||n>a||-1===t?a:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{}},Xe.ext=Ge={classes:{},errMode:"alert",feature:[],search:[],internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Xe.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Xe.version},a.extend(Ge,{afnFiltering:Ge.search,aTypes:Ge.type.detect,ofnSearch:Ge.type.search,oSort:Ge.type.order,afnSortData:Ge.order,aoFeatures:Ge.feature,oApi:Ge.internal,oStdClasses:Ge.classes,oPagination:Ge.pager}),a.extend(Xe.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var t="";t="";var e=t+"ui-state-default",n=t+"css_right ui-icon ui-icon-",r=t+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";a.extend(Xe.ext.oJUIClasses,Xe.ext.classes,{sPageButton:"fg-button ui-button "+e,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:e+" sorting_asc",sSortDesc:e+" sorting_desc",sSortable:e+" sorting",sSortableAsc:e+" sorting_asc_disabled",sSortableDesc:e+" sorting_desc_disabled",sSortableNone:e+" sorting_disabled",sSortJUIAsc:n+"triangle-1-n",sSortJUIDesc:n+"triangle-1-s",sSortJUI:n+"carat-2-n-s",sSortJUIAscAllowed:n+"carat-1-n",sSortJUIDescAllowed:n+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+e,sScrollFoot:"dataTables_scrollFoot "+e,sHeaderTH:e,sFooterTH:e,sJUIHeader:r+" ui-corner-tl ui-corner-tr",sJUIFooter:r+" ui-corner-bl ui-corner-br"})}();var Jn=Xe.ext.pager;a.extend(Jn,{simple:function(){return["previous","next"]},full:function(){return["first","previous","next","last"]},simple_numbers:function(t,e){return["previous",Je(t,e),"next"]},full_numbers:function(t,e){return["first","previous",Je(t,e),"next","last"]},_numbers:Je,numbers_length:7}),a.extend(!0,Xe.ext.renderer,{pageButton:{_:function(t,n,r,o,i,s){var l,u,c=t.oClasses,f=t.oLanguage.oPaginate,d=0,h=function(e,n){var o,p,g,b,m=function(e){de(t,e.data.action,!0)};for(o=0,p=n.length;p>o;o++)if(b=n[o],a.isArray(b)){var v=a("<"+(b.DT_el||"div")+"/>").appendTo(e);h(v,b)}else{switch(l="",u="",b){case"ellipsis":e.append("<span>&hellip;</span>");break;case"first":l=f.sFirst,u=b+(i>0?"":" "+c.sPageButtonDisabled);break;case"previous":l=f.sPrevious,u=b+(i>0?"":" "+c.sPageButtonDisabled);break;case"next":l=f.sNext,u=b+(s-1>i?"":" "+c.sPageButtonDisabled);break;case"last":l=f.sLast,u=b+(s-1>i?"":" "+c.sPageButtonDisabled);break;default:l=b+1,u=i===b?c.sPageButtonActive:""}l&&(g=a("<a>",{"class":c.sPageButton+" "+u,"aria-controls":t.sTableId,"data-dt-idx":d,tabindex:t.iTabIndex,id:0===r&&"string"==typeof b?t.sTableId+"_"+b:null}).html(l).appendTo(e),Ue(g,{action:b},m),d++)}};try{var p=a(e.activeElement).data("dt-idx");h(a(n).empty(),o),null!==p&&a(n).find("[data-dt-idx="+p+"]").focus()}catch(g){}}}});var qn=function(t,e,n,a){return t&&"-"!==t?(e&&(t=un(t,e)),t.replace&&(n&&(t=t.replace(n,"")),a&&(t=t.replace(a,""))),1*t):-1/0};return a.extend(Ge.type.order,{"date-pre":function(t){return Date.parse(t)||0},"html-pre":function(t){return sn(t)?"":t.replace?t.replace(/<.*?>/g,"").toLowerCase():t+""},"string-pre":function(t){return sn(t)?"":"string"==typeof t?t.toLowerCase():t.toString?t.toString():""},"string-asc":function(t,e){return e>t?-1:t>e?1:0},"string-desc":function(t,e){return e>t?1:t>e?-1:0}}),qe(""),a.extend(Xe.ext.type.detect,[function(t,e){var n=e.oLanguage.sDecimal;return cn(t,n)?"num"+n:null},function(t){if(t&&(!nn.test(t)||!an.test(t)))return null;var e=Date.parse(t);return null!==e&&!isNaN(e)||sn(t)?"date":null},function(t,e){var n=e.oLanguage.sDecimal;return cn(t,n,!0)?"num-fmt"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return dn(t,n)?"html-num"+n:null},function(t,e){var n=e.oLanguage.sDecimal;return dn(t,n,!0)?"html-num-fmt"+n:null},function(t){return sn(t)||"string"==typeof t&&-1!==t.indexOf("<")?"html":null}]),a.extend(Xe.ext.type.search,{html:function(t){return sn(t)?t:"string"==typeof t?t.replace(tn," ").replace(en,""):""},string:function(t){return sn(t)?t:"string"==typeof t?t.replace(tn," "):t}}),a.extend(!0,Xe.ext.renderer,{header:{_:function(t,e,n,r){a(t.nTable).on("order.dt.DT",function(a,o,i,s){if(t===o){var l=n.idx;e.removeClass(n.sSortingClass+" "+r.sSortAsc+" "+r.sSortDesc).addClass("asc"==s[l]?r.sSortAsc:"desc"==s[l]?r.sSortDesc:n.sSortingClass)}})},jqueryui:function(t,e,n,r){var o=n.idx;a("<div/>").addClass(r.sSortJUIWrapper).append(e.contents()).append(a("<span/>").addClass(r.sSortIcon+" "+n.sSortingClassJUI)).appendTo(e),a(t.nTable).on("order.dt.DT",function(a,i,s,l){t===i&&(e.removeClass(r.sSortAsc+" "+r.sSortDesc).addClass("asc"==l[o]?r.sSortAsc:"desc"==l[o]?r.sSortDesc:n.sSortingClass),e.find("span."+r.sSortIcon).removeClass(r.sSortJUIAsc+" "+r.sSortJUIDesc+" "+r.sSortJUI+" "+r.sSortJUIAscAllowed+" "+r.sSortJUIDescAllowed).addClass("asc"==l[o]?r.sSortJUIAsc:"desc"==l[o]?r.sSortJUIDesc:n.sSortingClassJUI))})}}}),Xe.render={number:function(t,e,n,a){return{display:function(r){var o=0>r?"-":"";r=Math.abs(parseFloat(r));var i=parseInt(r,10),s=n?e+(r-i).toFixed(n).substring(2):"";return o+(a||"")+i.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t)+s}}}},a.extend(Xe.ext.internal,{_fnExternApiFunc:ze,_fnBuildAjax:$,_fnAjaxUpdate:B,_fnAjaxParameters:J,_fnAjaxUpdateDraw:q,_fnAjaxDataSrc:z,_fnAddColumn:f,_fnColumnOptions:d,_fnAdjustColumnSizing:h,_fnVisibleToColumnIndex:p,_fnColumnIndexToVisible:g,_fnVisbleColumns:b,_fnGetColumns:m,_fnColumnTypes:v,_fnApplyColumnDefs:S,_fnHungarianMap:r,_fnCamelToHungarian:o,_fnLanguageCompat:i,_fnBrowserDetect:u,_fnAddData:y,_fnAddTr:D,_fnNodeToDataIndex:C,_fnNodeToColumnIndex:_,_fnGetCellData:w,_fnSetCellData:T,_fnSplitObjNotation:x,_fnGetObjectDataFn:I,_fnSetObjectDataFn:R,_fnGetDataMaster:A,_fnClearTable:F,_fnDeleteIndex:L,_fnInvalidateRow:P,_fnGetRowElements:N,_fnCreateTr:j,_fnBuildHead:k,_fnDrawHead:H,_fnDraw:V,_fnReDraw:U,_fnAddOptionsHtml:W,_fnDetectHeader:M,_fnGetUniqueThs:E,_fnFeatureHtmlFilter:X,_fnFilterComplete:G,_fnFilterCustom:Q,_fnFilterColumn:Y,_fnFilter:Z,_fnFilterCreateSearch:K,_fnEscapeRegex:te,_fnFilterData:ee,_fnFeatureHtmlInfo:re,_fnUpdateInfo:oe,_fnInfoMacros:ie,_fnInitialise:se,_fnInitComplete:le,_fnLengthChange:ue,_fnFeatureHtmlLength:ce,_fnFeatureHtmlPaginate:fe,_fnPageChange:de,_fnFeatureHtmlProcessing:he,_fnProcessingDisplay:pe,_fnFeatureHtmlTable:ge,_fnScrollDraw:be,_fnApplyToChildren:me,_fnCalculateColumnWidths:ve,_fnThrottle:Se,_fnConvertToWidth:ye,_fnScrollingWidthAdjust:De,_fnGetWidestNode:Ce,_fnGetMaxLenString:_e,_fnStringToCss:we,_fnScrollBarWidth:Te,_fnSortFlatten:xe,_fnSort:Ie,_fnSortAria:Re,_fnSortListener:Ae,_fnSortAttachListener:Fe,_fnSortingClasses:Le,_fnSortData:Pe,_fnSaveState:Ne,_fnLoadState:je,_fnSettingsFromNode:Oe,_fnLog:ke,_fnMap:He,_fnBindAction:Ue,_fnCallbackReg:We,_fnCallbackFire:Me,_fnLengthOverflow:Ee,_fnRenderer:$e,_fnDataSource:Be,_fnRowAttributes:O,_fnCalculateEnd:function(){}}),a.fn.dataTable=Xe,a.fn.dataTableSettings=Xe.settings,a.fn.dataTableExt=Xe.ext,a.fn.DataTable=function(t){return a(this).dataTable(t).api()},a.each(Xe,function(t,e){a.fn.DataTable[t]=e}),a.fn.dataTable})}(window,document),function(t,e,n,a){"use strict";function r(e,n){this.element=e,this.page=t(e).find(".page"),this.options=t.extend({},i,n),this._defaults=i,this._name=o,this.init()}var o="autoScroll",i={by:"continuous",speed:"medium",pause:5},s=!0,l=null,u=null,c=null;r.prototype={init:function(){var e,n,r=this,o=null,i=null,s=null,f=t(this.element).outerHeight(!0),d=f,h=this.element.scrollHeight-this.element.offsetHeight;this.canScroll()&&("page"===this.options.by?(e="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,n=this.page.outerHeight(!0)/t(this.element).outerHeight(!0)*e):(e="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,n=Math.abs((this.page.outerHeight(!0)-t(this.element).outerHeight(!0))/e)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,onPress:function(){u.pause(),TweenLite.killDelayedCallsTo(o),TweenLite.killDelayedCallsTo(i),TweenLite.killDelayedCallsTo(c),TweenLite.killDelayedCallsTo(s)},onRelease:function(){"none"!==r.options.by&&TweenLite.delayedCall(r.options.pause,o=function(){d=t(r.element).scrollTop()+f,u.progress(t(r.element).scrollTop()/h).play()})}}),l=Draggable.get(this.element),u=TweenLite.to(l.scrollProxy,n,{scrollTop:h,ease:Linear.easeNone,delay:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(l.scrollProxy.top())>=d&&(u.pause(),d+=f,TweenLite.delayedCall(r.options.pause,s=function(){u.resume()}))}:a,onComplete:function(){TweenLite.delayedCall(r.options.pause,i=function(){TweenLite.to(r.page,1,{autoAlpha:0,onComplete:function(){u.seek(0).pause(),"page"===r.options.by&&(d=f),t(r.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"}))},canScroll:function(){return this.options&&this.page.height()>t(this.element).height()}},r.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&u&&(s?(u.play(),s=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall(this.options.pause,c=function(){u.play()})))},r.prototype.pause=function(){u&&u.pause()},r.prototype.stop=function(){u&&u.kill(),this.element=null,this.page=null},t.fn.autoScroll=function(e){return this.each(function(){t.data(this,"plugin_"+o)||t.data(this,"plugin_"+o,new r(this,e))})}}(jQuery,window,document),"undefined"==typeof CONFIG)var CONFIG={ARROW_LOGOS_URL:"https://s3.amazonaws.com/risecontentlogos/financial/"};"undefined"!=typeof angular&&(angular.module("risevision.widget.googleSpreadsheet.config",[]).value("defaultLayout","widget.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","components/rv-common-i18n/dist/locales/translation_").constant("LOCALES_SUFIX",".json"));var RiseVision=RiseVision||{};RiseVision.Spreadsheet={},RiseVision.Spreadsheet=function(t,e,n,a){"use strict";function r(){e.rpc.call("","rsevent_ready",null,d.getString("id"),!0,!0,!0,!0,!0)}function o(){e.rpc.call("","rsevent_done",null,d.getString("id"))}function i(t){var e,n,a,r,o=!0;for(e=t.getNumberOfRows(),a=t.getNumberOfColumns()-1;a>-1;){for(r=0;e>r;r+=1)if(n=t.getValue(r,a),n&&""!==n){o=!1;break}o&&t.removeColumn(a),o=!0,a-=1}return t}function s(){p.scrollPause()}function l(){p.scrollPlay()}function u(t){var e=null;t?(e=i(t),p.build(e),g?(g=!1,r()):l()):g&&(g=!1,r())}function c(t){t&&(h.spreadsheet.url=t),b.getData({url:h.spreadsheet.url,refreshInterval:60*h.spreadsheet.refresh,callback:u})}function f(r,i){var s;p||(p=new RiseVision.Spreadsheet.Content),b||(b=new a),d=new e.Prefs,Array.isArray(r)&&r.length>0&&"additionalParams"===r[0]&&Array.isArray(i)&&i.length>0&&(h=$.extend({},JSON.parse(i[0])),$.each(h.columns,function(t,e){e.id=e.id.slice(0,e.id.indexOf("_"))}),t.body.style.background=h.background.color,s=[{"class":"heading_font-style",fontSetting:h.table.colHeaderFont},{"class":"data_font-style",fontSetting:h.table.dataFont}],n.loadFonts(s),n.addCSSRules(["a:active"+n.getFontCssStyle("data_font-style",h.table.dataFont),".even {background-color: "+h.table.rowColor+"}",".odd {background-color: "+h.table.altRowColor+"}"]),p.initialize(d,h,o),RiseVision.Spreadsheet.Arrows.load(function(){c()}))}var d=null,h=null,p=null,g=!0,b=null;return{setParams:f,getData:c,pause:s,play:l}}(document,gadgets,RiseVision.Common.Utilities,RiseVision.Common.Visualization);var RiseVision=RiseVision||{};RiseVision.Spreadsheet=RiseVision.Spreadsheet||{},RiseVision.Spreadsheet.Arrows={},RiseVision.Spreadsheet.Arrows=function(t){"use strict";function e(){i+=1,i===o.length&&l&&"function"==typeof l&&(s=!0,l())}function n(t){var n=new Image;n.onload=function(){e()},n.onerror=function(){e()},n.src=t}function a(){var e;for(e=0;e<o.length;e+=1)n(t.ARROW_LOGOS_URL+o[e])}function r(t){s?t&&t():(a(),t&&(l=t))}var o=["animated-green-arrow.gif","animated-red-arrow.gif"],i=0,s=!1,l=null;return{load:r}}(CONFIG);var RiseVision=RiseVision||{};RiseVision.Spreadsheet=RiseVision.Spreadsheet||{},RiseVision.Spreadsheet.Images={},RiseVision.Spreadsheet.Images=function(){"use strict";function t(){o+=1,o===r.length&&s&&"function"==typeof s&&(i=!0,s())}function e(e){var n=new Image;n.onload=function(){e.$cell.append(this),t()},n.onerror=function(){t()},n.src=e.url}function n(){var t;for(t=0;t<r.length;t+=1)e(r[t])}function a(t,e){!i&&t.length>0?(r=t,n(),e&&(s=e)):e&&e()}var r=[],o=0,i=!1,s=null;return{load:a}}();var RiseVision=RiseVision||{};RiseVision.Spreadsheet=RiseVision.Spreadsheet||{},RiseVision.Spreadsheet.Content=function(){"use strict";function t(){x={scrollContainer:$("#scrollContainer"),page:$("."+I)}}function e(t,e){var n,a,r,o,i=$("."+t.id+":first"),s=i.parent().children().index(i),l=T.getNumberOfRows();for(n=0;l>n;n+=1)a=T.getValue(n,s),r=t.values[n],""!==a&&isNaN(a)&&(a=a.replace(/[^0-9\.-]+/g,""),a=parseFloat(a)),""!==r&&isNaN(r)&&(r=r.replace(/[^0-9\.-]+/g,""),r=parseFloat(r)),a!==r&&""!==a&&""!==r&&(isNaN(a)||isNaN(r)||(o=$("."+t.id).eq(n),e===j?a>r?o.addClass("changeUpIncrease"):o.addClass("changeUpDecrease"):r>a?o.addClass("changeDownDecrease"):o.addClass("changeDownIncrease")))}function n(t,e){var n,a,r,o=$("."+t+":first"),i=o.parent().children().index(o),s=T.getNumberOfRows();for(n=0;s>n;n+=1)a=T.getValue(n,i),""!==a&&isNaN(a)&&(a=a.replace(/[^0-9\.-]+/g,""),a=parseFloat(a)),""===a||isNaN(a)||(r=$("."+z[i]).eq(n),e===k?a>=0?r.addClass("valuePositivePositive"):r.addClass("valuePositiveNegative"):0>a?r.addClass("valueNegativeNegative"):r.addClass("valueNegativePositive"))}function a(){var t=$("."+L);if(t.length>0){if("undefined"!=typeof t.data(N))return t.data(N)}else if("undefined"!=typeof x.scrollContainer.data(N))return x.scrollContainer.data(N);return null}function r(){X.columns=[],$.each(M,function(t,e){var n,a,r=T.getNumberOfRows(),o=[],i=$("."+e.id+":first");if("undefined"!=typeof e.colorCondition&&(e.colorCondition===j||e.colorCondition===O)){for(n=i.parent().children().index(i),a=0;r>a;a+=1)o.push(T.getValue(a,n));X.columns.push({id:e.id,values:o})}})}function o(t){$.each(M,function(e,n){var a,r=$("."+n.id),o=$("."+n.id+":first"),i=o.parent().children().index(o);r.length>0&&(""!==n.headerText&&t.eq(i).html(n.headerText),q&&(a=n.width/U.getInt("rsW")*100,n.width=a.toString()+"%"),t.eq(i).css("text-align",n.align),r.css("text-align",n.align),$.each(r,function(){var t,e,a=$(this);if(a.text()&&""!==$.trim(a.text())&&!isNaN(a.text()))switch(a.text(parseFloat(a.text()).toFixed(n.decimals)),t=a.text(),n.sign){case"none":a.html(Math.abs(t).toFixed(n.decimals));break;case"pos-neg":parseFloat(t)>0&&a.html("+"+t);break;case"bracket":parseFloat(t)<0&&a.html("("+Math.abs(t).toFixed(n.decimals)+")");break;case"arrow":e=$("<img class='arrow'>"),e.height(a.height()),a.html(Math.abs(t).toFixed(n.decimals)),parseFloat(t)<0?e.attr("src",CONFIG.ARROW_LOGOS_URL+"animated-red-arrow.gif"):parseFloat(t)>=0&&e.attr("src",CONFIG.ARROW_LOGOS_URL+"animated-green-arrow.gif"),a.prepend(e)}}))})}function i(){var t,e,n=!1;for(t=0;t<T.getNumberOfColumns();t+=1)if(e=T.getColumnLabel(t),e&&""!==e){n=!0;break}return n}function s(){var t,e,n=$("<thead>"),a=$("<tr>");for(t=0;t<T.getNumberOfColumns();t+=1)e=$("<th class='heading_font-style'>"),i()&&e.html(T.getColumnLabel(t)),a.append(e);n.append(a),x.page.append(n)}function l(t,e,n,a){var r=$("<td>");""!==n&&r.attr("style",n),r.addClass(R+" "+a),r.html(e),t.append(r)}function u(t,e){var n,a,r,o=$("<tr class='"+F+"'>");for(r=0;t>r;r+=1)n=T.getFormattedValue(e,r),a=T.getProperty(e,r,"style"),a&&(a=a.substring(0,a.indexOf("font-family:"))),l(o,n,a,z[r]);x.page.append(o)}function c(){x.scrollContainer.width(U.getInt("rsW")),x.scrollContainer.height(U.getInt("rsH"))}function f(){var t,e=T.getNumberOfRows();for(x.page.empty(),T.getNumberOfColumns()>0&&s(),t=0;e>t;t+=1)u(T.getNumberOfColumns(),t);o($("."+I+" th")),Y.columnDefs=[],$.each(M,function(t,e){var n=$("."+e.id+":first");Y.columnDefs.push({width:e.width,targets:[n.parent().children().index(n)]})}),G=x.page.dataTable(Y),$("."+L).css("overflow","hidden")}function d(){var t,e,n,a=T.getNumberOfRows(),r=T.getNumberOfColumns(),i=[];for(e=0;a>e;e+=1){for(t=[],n=0;r>n;n+=1)t.push(T.getFormattedValue(e,n));i.push(t)}for(G.api().rows.add(i).draw(),$("."+L+" table tbody tr").addClass(F),$("."+L+" table tbody tr td").addClass(R),n=0;r>n;n+=1)$("."+L+" table tbody tr td:nth-child("+(n+1)+")").addClass(z[n]);o($("."+I+" th"))}function h(){var t,e;for(e=0;e<T.getNumberOfColumns();e+=1)t=$("."+I+" thead th").eq(e),i()&&t.length>0&&t.html(T.getColumnLabel(e))}function p(){var t=$("."+A),e=$("."+R),n=parseInt(t.css("font-size"),10)/V,a=parseInt(e.css("font-size"),10)/V;t.css("font-size",n+"em"),e.css("font-size",a+"em"),$(".tableMenuButton").css("font-size",a+"em")}function g(){var t,e=T.getNumberOfColumns();for(z=[],t=0;e>t;t+=1)z.push(T.getColumnId(t))}function b(){var t=$("."+L);t.length>0?(t.height(x.scrollContainer.outerHeight(!0)-$("."+P).outerHeight()+"px"),a()||t.autoScroll(B).on("done",function(){!W&&K&&(S(),K=!1),Z=!1,J&&J()})):a()||x.scrollContainer.autoScroll(B).on("done",function(){Z=!1,J&&J()})}function m(){var t=-1;X||(X={}),$.each(M,function(a,r){r.colorCondition===j||r.colorCondition===O?X.hasOwnProperty("columns")&&($.each(X.columns,function(e,n){return n.id===r.id?(t=e,!1):void 0}),e(X.columns[t],r.colorCondition)):(r.colorCondition===k||r.colorCondition===H)&&n(r.id,r.colorCondition)}),r()}function v(){$("."+P+" table tr th, td").css({"padding-top":E.padding,"padding-bottom":E.padding}),$("."+P+" table tr th:first-child, td:first-child").css({"padding-left":"10px"}),$("."+P+" table tr th:last-child, td:last-child").css({"padding-right":"10px"})}function S(){G.api().clear(),g(),$(".dataTables_scrollHeadInner ."+I+" th").length!==T.getNumberOfColumns()?(G.api().destroy(!0),G=null,f()):(h(),d()),v(),p(),m(),b()}function y(){var t,e,n=T.getNumberOfRows(),a=z.length,r=$(".repeat");for(Q=[],t=0;n>t;t+=1)for(t>0&&r.parent().append(r.clone()),e=0;a>e;e+=1){var o=$("."+z[e]+":last");o&&(o.hasClass("image")?Q.push({url:T.getValue(t,e),$cell:o}):o.hasClass("qrCode")?T.getValue(t,e)&&Q.push({url:"https://chart.googleapis.com/chart?cht=qr&chs=100x100&chld=H|0&chl="+encodeURIComponent(T.getValue(t,e)),$cell:o}):o.html(T.getFormattedValue(t,e)))}}function D(){var t=a();t&&t.canScroll()&&!Z&&(t.play(),Z=!0)}function C(){var t=a();t&&t.canScroll()&&(t.pause(),Z=!1)}function _(t){var e=a();T=t,W?(g(),c(),y(),RiseVision.Spreadsheet.Images.load(Q,function(){$("table").length>0&&(o($("."+I+" th")),G=x.page.dataTable(Y),$("."+L).css("overflow","hidden"),v()),p(),m(),b(),q=!1})):q?(g(),c(),f(),v(),p(),m(),b(),q=!1):e&&e.canScroll()&&Z?K=!0:S()}function w(t,e,n){U=t,M=e.columns,B=e.scroll,E={},E.rowColor=e.table.rowColor,E.altRowColor=e.table.altRowColor,E.padding=parseInt(e.table.rowPadding/2,10)+"px",n&&"function"==typeof n&&(J=n),e.hasOwnProperty("layout")&&!e.layout.default&&e.layout.customURL&&""!==e.layout.customURL&&(W=!0)}var T,x,I="page",R="data_font-style",A="heading_font-style",F="item",L="dataTables_scrollBody",P="dataTables_scrollHead",N="plugin_autoScroll",j="change-up",O="change-down",k="value-positive",H="value-negative",V=16,U=null,W=!1,M=[],E={},B={},J=null,q=!0,z=[],X=null,G=null,Q=[],Y={destroy:!0,searching:!1,info:!1,lengthChange:!1,paging:!1,ordering:!1,scrollY:"500px",scrollCollapse:!0},Z=!1,K=!1;return t(),{initialize:w,build:_,scrollPlay:D,scrollPause:C}},function(t,e,n,a){"use strict";function r(){RiseVision.Spreadsheet.play()}function o(){RiseVision.Spreadsheet.pause()}function i(){RiseVision.Spreadsheet.pause()}var s=new a.Prefs,l=s.getString("id");t.oncontextmenu=function(){return!1},l&&""!==l&&(a.rpc.register("rscmd_play_"+l,r),a.rpc.register("rscmd_pause_"+l,o),a.rpc.register("rscmd_stop_"+l,i)),e.body.style.background="transparent",n.setOnLoadCallback(function(){a.rpc.register("rsparam_set_"+l,RiseVision.Spreadsheet.setParams),a.rpc.register("rscmd_getSpreadsheetData",function(t){RiseVision.Spreadsheet.getData(t)}),a.rpc.call("","rsparam_get",null,l,["additionalParams"])})}(window,document,google,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-41395348-9"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}();
//# sourceMappingURL=data:application/json;base64,