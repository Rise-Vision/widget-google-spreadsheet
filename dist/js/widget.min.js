var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var o=null;e.event?(o=e,o.file_url&&(o.file_format=n(o.file_url)),o.company_id=a,o.display_id=r,t(o)):t(o)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,o=e.getUTCDate();return 10>n&&(n="0"+n),10>o&&(o="0"+o),t+n+o}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function o(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},o=JSON.parse(JSON.stringify(n));return o.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),o.rows[0].json=JSON.parse(JSON.stringify(e)),o.rows[0].json.ts=(new Date).toISOString(),o}function i(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function s(e,t){a=e,r=t}var r="",a="";return{getInsertData:o,getFileFormat:n,logEvent:i,setIds:s}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-c<358e4?e({}):(t.open("POST",i,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return r&&l===e}function o(o,i){function f(t){var n,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",o),c=t.refreshedAt||c,u=t.token||u,n=e.getInsertData(i),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),i.cb&&"function"==typeof i.cb&&(a.onloadend=function(){i.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!o||!i||i.hasOwnProperty("event")&&!i.event||i.hasOwnProperty("event")&&n(i.event)))return r=!0,l=i.event,setTimeout(function(){r=!1},a),t(f)}var i="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",c=0,u="";return{log:o}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family: "+decodeURIComponent(t.font.family).replace(/'/g,"")+"; ",o="color: "+(t.color?t.color:t.forecolor)+"; ",i="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),s="font-weight: "+(t.bold?"bold":"normal")+"; ",r="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+";";return"."+e+" {"+n+o+i+s+r+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,o=e.length;o>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,s){function r(){s&&"function"==typeof s&&s()}function a(){r()}var l=null,c=[],u=[],f=[];if(!n||0===n.length)return r(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&t([e(n.class,n.fontStyle)])});for(var d=0;d<n.length;d++)n[d].fontStyle&&n[d].fontStyle.font.type&&"google"===n[d].fontStyle.font.type&&(l=n[d].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),c.push(l));for(d=0;d<n.length;d++)n[d].fontStyle&&n[d].fontStyle.font.type&&"custom"===n[d].fontStyle.font.type&&(u.push(decodeURIComponent(n[d].fontStyle.font.family).replace(/'/g,"")),f.push(n[d].fontStyle.font.url.replace(/'/g,"\\'")));if(0===c.length&&0===u.length)r();else{for(var g=0;g<u.length;g+=1)o(u[g],f[g]);c.length>0?i(c,a):r()}}function o(e,t,n){var o=null,i="font-family: "+e+"; src: url('"+t+"');";n=n||document,o=n.styleSheets[0],null!==o&&o.addRule("@font-face",i)}function i(e,t){WebFont.load({google:{families:e},active:function(){t&&"function"==typeof t&&t()},inactive:function(){t&&"function"==typeof t&&t()},timeout:2e3})}function s(e){for(var t=e.length,n=[],o=0;t>o;o++)n[o]=new Image,n[o].src=e[o]}function r(e){for(var t,n=window.location.search.substring(1),o=n.split("&"),i=0;i<o.length;i++)if(t=o[i].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function a(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}function l(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent}function c(e,t){var n=new XMLHttpRequest;if(e&&t&&"function"==typeof t){n.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{n.send(),t(n.status>=200&&n.status<304)}catch(o){t(!1)}}}return{getQueryParameter:r,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:o,loadGoogleFonts:i,preloadImages:s,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:c}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var RiseVision=RiseVision||{};RiseVision.Spreadsheet={},RiseVision.Spreadsheet=function(e,t){"use strict";function n(){t.rpc.call("","rsevent_ready",null,u.getString("id"),!0,!0,!0,!0,!0)}function o(){d=new RiseVision.Common.Message(e.getElementById("container"),e.getElementById("messageContainer")),n()}function i(){return"spreadsheet_events"}function s(e){RiseVision.Common.LoggerUtils.logEvent(i(),e)}function r(){console.log("pause")}function a(){console.log("play")}function l(n){u=new t.Prefs,f=JSON.parse(JSON.stringify(n)),f.width=u.getInt("rsW"),f.height=u.getInt("rsH"),e.getElementById("container").style.width=f.width+"px",e.getElementById("container").style.height=f.height+"px",o()}function c(){r()}var u=new t.Prefs,f=null,d=null;return{getTableName:i,logEvent:s,setAdditionalParams:l,pause:r,play:a,stop:c}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function o(){if(s){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",s=!1}}function i(n){var o,i=document.createDocumentFragment();s?(o=t.querySelector(".message"),o.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",o=document.createElement("p"),o.innerHTML=n,o.setAttribute("class","message"),i.appendChild(o),t.appendChild(i),s=!0)}var s=!1;return n(),{hide:o,show:i}},function(e,t,n){"use strict";function o(e,t){var n,o="",i="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"displayId"===e[1]&&(i=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,i),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.Spreadsheet.setAdditionalParams(n)))}function i(){RiseVision.Spreadsheet.play()}function s(){RiseVision.Spreadsheet.pause()}function r(){RiseVision.Spreadsheet.stop()}var a=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},a&&""!==a&&(n.rpc.register("rscmd_play_"+a,i),n.rpc.register("rscmd_pause_"+a,s),n.rpc.register("rscmd_stop_"+a,r),n.rpc.register("rsparam_set_"+a,o),n.rpc.call("","rsparam_get",null,a,["companyId","displayId","additionalParams"]))}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-11"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
